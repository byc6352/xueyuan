<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VirtualApp沙盒基本原理_byc6352的专栏-CSDN博客</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="article_content clearfix" id="article_content" style="overflow: hidden;">
            <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css" rel="stylesheet">
                                        <div class="markdown_views prism-atom-one-dark" id="content_views">
                    <!-- flowchart 箭头图标 勿删 -->
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-linecap="round" d="M 5 0 L 0 2.5 L 5 5 Z" />
                    </svg>
                                            <div class="article_content clearfix" id="article_content" style="height: 1392px; overflow: hidden;">
            
                                        
                <div class="htmledit_views" id="content_views">
</div></div><p><a href="https://github.com/asLody/VirtualApp" rel="nofollow">VirtualApp</a><span>是一个开源的Android
 App虚拟化引擎，允许在其中创建虚拟空间，并在这个虚拟空间中运行其他应用。通过阅读源码及动态调试，基本了解了其运行原理，在此记录。</span></p>
<p></p>
<h2 id="本质"><a name="t0"></a><a name="t0"></a><a></a><a></a>
本质<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E6%9C%AC%E8%B4%A8" rel="nofollow"></a></h2>
<p></p>
<p>
Android应用隔离是基于Linux系统的多用户机制实现的，即每个应用在安装时被分配了不同的Linux用户uid/gid。而在VirtualApp中，client应用（通过VirtualApp安装的应用）与host应用（即VirtualApp本身）是具有相同用户uid的。</p>
<p>
因此，VirtualApp在运行时，包含以下三部分：</p>
<ul><li>Main Process，进程名io.virtualapp，主要负责VirtualApp用户界面及应用管理</li><li>Server Process，进程名io.virtualapp:x，主要负责系统服务的代理，是通过Content Provider启动的</li><li>VApp Process，进程名io.virtualapp:p[0-…]，作为将来运行client应用的进程，当client应用启动后，其进程名会更新为client应用的包名</li></ul><p>
下面是在VirtualApp中运行应用后通过<code class="highlighter-rouge">ps</code>命令得到的结果：</p>
<pre class="prettyprint"><code class="language-bash hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">generic_x86:/ <span class="nv">$&nbsp;</span>ps |grep u0_a60</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">u0_a60    2385  1258  996260 54456 SyS_epoll_ 00000000 S io.virtualapp</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">u0_a60    2412  1258  980940 48272 SyS_epoll_ 00000000 S io.virtualapp:x</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">u0_a60    3705  1258  993632 54472 SyS_epoll_ 00000000 S org.galaxy.simpleapp</div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
可以看到，以上进程，均是以VirtualApp的用户uid运行的。因此，Android应用隔离此时不再适用，我们可以对client应用进行hook而无需root权限。</p>
<hr><h2 id="运行流程"><a name="t1"></a><a name="t1"></a><a></a><a></a>
运行流程<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B" rel="nofollow"></a></h2>
<p>
从启动VirtualApp到运行其中的应用，大致流程如下：</p>
<h4 id="启动host应用">
启动host应用<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E5%90%AF%E5%8A%A8host%E5%BA%94%E7%94%A8" rel="nofollow"></a></h4>
<p>
我们启动VirtualApp，其Application为<code class="highlighter-rouge">io.virtualapp.VApp</code>。在<code class="highlighter-rouge">attachBaseContext()</code>方法中会调用到<code class="highlighter-rouge">com.lody.virtual.client.core.PatchManager#injectInternal</code>，但此时为Main
 Process，不进行系统服务的替换。</p>
<h4 id="启动server-process">
启动Server Process<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E5%90%AF%E5%8A%A8server-process" rel="nofollow"></a></h4>
<p>
host应用会进行一些初始化，其中就包括获取全部已安装应用，这会调用到<code class="highlighter-rouge">com.lody.virtual.client.core.VirtualCore#getAllApps</code>。而这一方法最终会访问<code class="highlighter-rouge">com.lody.virtual.server.BinderProvider</code>。由AndroidManifest.xml可知，该provider会运行在新进程io.virtualapp:x中，即Server
 Process。</p>
<p>
由于在新进程中启动组件，同样会首先创建该应用的Application，因此也会调用到<code class="highlighter-rouge">com.lody.virtual.client.core.PatchManager#injectInternal</code>。此时，会进行相应系统服务(ActivityManager和PackageManager)的代理构造和替换。</p>
<h4 id="启动vapp-process">
启动VApp Process<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E5%90%AF%E5%8A%A8vapp-process" rel="nofollow"></a></h4>
<p>
点击一个已安装应用，此时会通过替换掉的系统服务访问真实的系统服务（主要是ActivityManager），并在新进程中启动组件<code class="highlighter-rouge">com.lody.virtual.client.stub.StubActivity.C0</code>。由AndroidManifest.xml可知，该进程具有后缀:p0。</p>
<p>
同样的，在该Activity组件启动之前会初始化<code class="highlighter-rouge">io.virtualapp.VApp</code>，并在<code class="highlighter-rouge">com.lody.virtual.client.core.PatchManager#injectInternal</code>中完成系统服务的代理构造和替换。</p>
<h4 id="启动client应用">
启动client应用<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E5%90%AF%E5%8A%A8client%E5%BA%94%E7%94%A8" rel="nofollow"></a></h4>
<p>
此时，真正的client应用尚未启动，进程io.virtualapp:p0仅仅是作为一个placeholder。StubActivity会从Intent中获取到client应用的相关信息，并修改自身ActivityThread的handler。随后调用startActivity启动client应用。</p>
<p>
由于之前Server Process和VApp Process都已完成了相关系统服务的替换，这里会完成client应用的bindApplication调用、构造client应用的LoadedApk，并通过反射完成真正的Application和Activity的创建。</p>
<p>
最终，client应用便运行在了我们的VApp Process中。</p>
<hr><h2 id="系统服务的代理和替换"><a name="t2"></a><a name="t2"></a><a></a><a></a>
系统服务的代理和替换<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BB%A3%E7%90%86%E5%92%8C%E6%9B%BF%E6%8D%A2" rel="nofollow"></a></h2>
<p>
VirtualApp之所以能够实现虚拟空间，是因为其对许多系统服务进行了代理和替换。因此，这部分便是整个框架的核心。系统服务运行在system_server中，Android应用调用系统服务，是通过Binder机制进行IPC。因此，应用所持有的是系统服务的BinderProxy，通过对这些BinderProxer构造代理并替换，便实现了对系统服务的代理和替换。</p>
<p>
具体地，我们以<code class="highlighter-rouge">com.lody.virtual.client.hook.patchs.am.ActivityManagerPatch</code>为例，这个类实现了对ActivityManager服务的代理和替换。</p>
<h4 id="代理的构造">
代理的构造<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E4%BB%A3%E7%90%86%E7%9A%84%E6%9E%84%E9%80%A0" rel="nofollow"></a></h4>
<p>
可以看到，这个类的注记中包含了大量类名：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="nd"><span class="hljs-meta">@Patch</span></span><span class="o">({</span><span class="n">StartActivity</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">StartActivityAsCaller</span><span class="o">.</span><span class="na">class</span><span class="o">,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">StartActivityAndWait</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">StartActivityWithConfig</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">StartActivityIntentSender</span><span class="o">.</span><span class="na">class</span><span class="o">,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">StartNextMatchingActivity</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">StartVoiceActivity</span><span class="o">.</span><span class="na">class</span><span class="o">,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">GetIntentSender</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">RegisterReceiver</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">GetContentProvider</span><span class="o">.</span><span class="na">class</span><span class="o">,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">GetContentProviderExternal</span><span class="o">.</span><span class="na">class</span><span class="o">,</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">...</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
而这些列出的每一个类，对应于一个方法的hook，例如，<code class="highlighter-rouge">com.lody.virtual.client.hook.patchs.am.StartActivity</code>是ActivityManager服务的<code class="highlighter-rouge">startActivity</code>方法的hook。这些类均继承自<code class="highlighter-rouge">com.lody.virtual.client.hook.base.Hook</code>，包含了方法<code class="highlighter-rouge">beforeCall()</code>,&nbsp;<code class="highlighter-rouge">call()</code>,&nbsp;<code class="highlighter-rouge">afterCall()</code>，这些方法便是hook的具体内容。</p>
<p>
<code class="highlighter-rouge">ActivityManagerPatch</code>在创建时，会调用到其父类的方法<code class="highlighter-rouge">com.lody.virtual.client.hook.base.PatchDelegate#onBindHooks</code>。这里会检查上述注记中列出的hook，并对符合条件的hook调用<code class="highlighter-rouge">addHook()</code>方法：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">...</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">PatchDelegate</span><span class="o">&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">getClass</span><span class="o">();</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="n">Patch</span> <span class="n">patch</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">Patch</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">version</span> <span class="o">=</span> <span class="n">Build</span><span class="o">.</span><span class="na">VERSION</span><span class="o">.</span><span class="na">SDK_INT</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">patch</span> <span class="o">!=</span> <span class="kc"><span class="hljs-keyword">null</span></span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">hookTypes</span> <span class="o">=</span> <span class="n">patch</span><span class="o">.</span><span class="na">value</span><span class="o">();</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="k"><span class="hljs-keyword">for</span></span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">hookType</span> <span class="o">:</span> <span class="n">hookTypes</span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="n">ApiLimit</span> <span class="n">apiLimit</span> <span class="o">=</span> <span class="n">hookType</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">ApiLimit</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="kt"><span class="hljs-keyword">boolean</span></span> <span class="n">needToAddHook</span> <span class="o">=</span> <span class="kc"><span class="hljs-keyword">true</span></span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">apiLimit</span> <span class="o">!=</span> <span class="kc"><span class="hljs-keyword">null</span></span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">apiStart</span> <span class="o">=</span> <span class="n">apiLimit</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="kt"><span class="hljs-keyword">int</span></span> <span class="n">apiEnd</span> <span class="o">=</span> <span class="n">apiLimit</span><span class="o">.</span><span class="na">end</span><span class="o">();</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="kt"><span class="hljs-keyword">boolean</span></span> <span class="n">highThanStart</span> <span class="o">=</span> <span class="n">apiStart</span> <span class="o">==</span> <span class="o">-</span><span class="mi"><span class="hljs-number">1</span></span> <span class="o">||</span> <span class="n">version</span> <span class="o">&gt;</span> <span class="n">apiStart</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="kt"><span class="hljs-keyword">boolean</span></span> <span class="n">lowThanEnd</span> <span class="o">=</span> <span class="n">apiEnd</span> <span class="o">==</span> <span class="o">-</span><span class="mi"><span class="hljs-number">1</span></span> <span class="o">||</span> <span class="n">version</span> <span class="o">&lt;</span> <span class="n">apiEnd</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(!</span><span class="n">highThanStart</span> <span class="o">||</span> <span class="o">!</span><span class="n">lowThanEnd</span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="n">needToAddHook</span> <span class="o">=</span> <span class="kc"><span class="hljs-keyword">false</span></span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">needToAddHook</span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="n">addHook</span><span class="o">(</span><span class="n">hookType</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">...</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
而<code class="highlighter-rouge">addHook()</code>最终会调用到<code class="highlighter-rouge">com.lody.virtual.client.hook.base.HookDelegate#addHook</code>，其实质便是将这个hook添加至映射表<code class="highlighter-rouge">internalHookTable</code>中：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="kd"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="n"><span class="hljs-function">Hook</span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">addHook</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">Hook</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">hook</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">hook</span> <span class="o">!=</span> <span class="kc"><span class="hljs-keyword">null</span></span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">TextUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">hook</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">internalHookTable</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">hook</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="n">VLog</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s"><span class="hljs-string">"The Hook(%s, %s) you added has been in existence."</span></span><span class="o">,</span> <span class="n">hook</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="n">hook</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="k"><span class="hljs-keyword">return</span></span> <span class="n">hook</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">internalHookTable</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">hook</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="n">hook</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">return</span></span> <span class="n">hook</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="o">}</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
<code class="highlighter-rouge">internalHookTable</code>维护了所有的hook，以hook的名称（一般就是所hook的方法的名称）作为key。随后，在<code class="highlighter-rouge">com.lody.virtual.client.hook.base.HookDelegate.HookHandler</code>的<code class="highlighter-rouge">invoke()</code>方法中，查找表&nbsp;<code class="highlighter-rouge">internalHookTable</code>中是否包含将要执行的方法名；如果有，则依次执行对应hook的<code class="highlighter-rouge">beforeCall()</code>,&nbsp;<code class="highlighter-rouge">call()</code>,&nbsp;<code class="highlighter-rouge">afterCall()</code>：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="kd"><span class="hljs-keyword">private</span></span> <span class="kd"><span class="hljs-class"><span class="hljs-keyword">class</span></span></span><span class="hljs-class"> </span><span class="nc"><span class="hljs-class"><span class="hljs-title">HookHandler</span></span></span><span class="hljs-class"> </span><span class="kd"><span class="hljs-class"><span class="hljs-keyword">implements</span></span></span><span class="hljs-class"> </span><span class="n"><span class="hljs-class"><span class="hljs-title">InvocationHandler</span></span></span><span class="hljs-class"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="nd"><span class="hljs-meta">@Override</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="kd"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="n"><span class="hljs-function">Object</span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">invoke</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">Object</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">proxy</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">Method</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">method</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">Object</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">[]</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">args</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> </span><span class="n"><span class="hljs-function">Throwable</span></span><span class="hljs-function"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">Hook</span> <span class="n">hook</span> <span class="o">=</span> <span class="n">getHook</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="k"><span class="hljs-keyword">try</span></span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">hook</span> <span class="o">!=</span> <span class="kc"><span class="hljs-keyword">null</span></span> <span class="o">&amp;&amp;</span> <span class="n">hook</span><span class="o">.</span><span class="na">isEnable</span><span class="o">())</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">hook</span><span class="o">.</span><span class="na">beforeCall</span><span class="o">(</span><span class="n">mBaseInterface</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">))</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="n">Object</span> <span class="n">res</span> <span class="o">=</span> <span class="n">hook</span><span class="o">.</span><span class="na">call</span><span class="o">(</span><span class="n">mBaseInterface</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="n">res</span> <span class="o">=</span> <span class="n">hook</span><span class="o">.</span><span class="na">afterCall</span><span class="o">(</span><span class="n">mBaseInterface</span><span class="o">,</span> <span class="n">method</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="n">res</span><span class="o">);</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                        <span class="k"><span class="hljs-keyword">return</span></span> <span class="n">res</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="k"><span class="hljs-keyword">return</span></span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">mBaseInterface</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
而这里的类<code class="highlighter-rouge">HookHandler</code>，就是构造的Java代理的Handler：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="kd"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">HookDelegate</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">(</span></span></span><span class="n"><span class="hljs-function"><span class="hljs-params">T</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">baseInterface</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">,</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">Class</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">&lt;?&gt;...</span></span></span><span class="hljs-function"><span class="hljs-params"> </span></span><span class="n"><span class="hljs-function"><span class="hljs-params">proxyInterfaces</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">)</span></span></span><span class="hljs-function"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">this</span></span><span class="o">.</span><span class="na">mBaseInterface</span> <span class="o">=</span> <span class="n">baseInterface</span><span class="o">;</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">baseInterface</span> <span class="o">!=</span> <span class="kc"><span class="hljs-keyword">null</span></span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">proxyInterfaces</span> <span class="o">==</span> <span class="kc"><span class="hljs-keyword">null</span></span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="n">proxyInterfaces</span> <span class="o">=</span> <span class="n">HookUtils</span><span class="o">.</span><span class="na">getAllInterface</span><span class="o">(</span><span class="n">baseInterface</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">mProxyInterface</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">)</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">baseInterface</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">(),</span> <span class="n">proxyInterfaces</span><span class="o">,</span> <span class="k"><span class="hljs-keyword">new</span></span> <span class="n">HookHandler</span><span class="o">());</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
对于<code class="highlighter-rouge">ActivityManagerPatch</code>来说，这里的baseInterface便是原始的BinderProxy:<code class="highlighter-rouge">ActivityManagerProxy</code></p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="kd"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">ActivityManagerPatch</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="kd"><span class="hljs-keyword">super</span></span><span class="o">(</span><span class="k"><span class="hljs-keyword">new</span></span> <span class="n">HookDelegate</span><span class="o">&lt;</span><span class="n">IInterface</span><span class="o">&gt;(</span><span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">getDefault</span><span class="o">.</span><span class="na">call</span><span class="o">()));</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="o">}</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
综上，我们根据baseInterface，为其构造了代理mProxyInterface。从而访问mProxyInterface时，便会执行<code class="highlighter-rouge">HookHandler</code>的<code class="highlighter-rouge">invoke()</code>方法，进而查找<code class="highlighter-rouge">internalHookTable</code>，对设置了hook的方法执行hook。</p>
<h4 id="系统服务的替换">
系统服务的替换<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%9B%BF%E6%8D%A2" rel="nofollow"></a></h4>
<p>
如之前所说，对系统服务的替换，是通过对应用所持有的系统服务的BinderProxy进行替换的。以上是构造代理的基本过程，那么如何将应用所持有的BinderProxy替换成我们构造的代理呢？回到<code class="highlighter-rouge">ActivityManagerPatch</code>，这个类的inject()方法完成了实际的替换工作：</p>
<pre class="prettyprint"><code class="language-java hljs has-numbering"></code><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="nd"><span class="hljs-meta">@Override</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="kd"><span class="hljs-function"><span class="hljs-keyword">public</span></span></span><span class="hljs-function"> </span><span class="kt"><span class="hljs-function"><span class="hljs-keyword">void</span></span></span><span class="hljs-function"> </span><span class="nf"><span class="hljs-function"><span class="hljs-title">inject</span></span></span><span class="o"><span class="hljs-function"><span class="hljs-params">()</span></span></span><span class="hljs-function"> </span><span class="kd"><span class="hljs-function"><span class="hljs-keyword">throws</span></span></span><span class="hljs-function"> </span><span class="n"><span class="hljs-function">Throwable</span></span><span class="hljs-function"> </span><span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">gDefault</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="n">IActivityManager</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">gDefault</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">getHookDelegate</span><span class="o">().</span><span class="na">getProxyInterface</span><span class="o">());</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">}</span> <span class="k"><span class="hljs-keyword">else</span></span> <span class="k"><span class="hljs-keyword">if</span></span> <span class="o">(</span><span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">gDefault</span><span class="o">.</span><span class="na">type</span><span class="o">()</span> <span class="o">==</span> <span class="n">Singleton</span><span class="o">.</span><span class="na">TYPE</span><span class="o">)</span> <span class="o">{</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">Object</span> <span class="n">gDefault</span> <span class="o">=</span> <span class="n">ActivityManagerNative</span><span class="o">.</span><span class="na">gDefault</span><span class="o">.</span><span class="na">get</span><span class="o">();</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="n">Singleton</span><span class="o">.</span><span class="na">mInstance</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">gDefault</span><span class="o">,</span> <span class="n">getHookDelegate</span><span class="o">().</span><span class="na">getProxyInterface</span><span class="o">());</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">}</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="o">...</span></div></div></li></ol><div class="hljs-button {2}"></div><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>
<code class="highlighter-rouge">ActivityManagerNative.gDefault</code>便是应用所持有的原始<code class="highlighter-rouge">ActivityManagerProxy</code>对象，通过Java反射，将替换成为<code class="highlighter-rouge">getHookDelegate().getProxyInterface()</code>。而替换的内容，便是我们所构造的代理<code class="highlighter-rouge">mProxyInterface</code>。</p>
<p>
由此，我们完成了对系统服务进行代理和替换的整个过程。随后，在调用系统服务时，便会执行以下操作：</p>
<ul><li>访问BinderProxy的代理，即我们设置了hook的代理</li><li>根据hook的具体内容操作，对数据进行处理；需要调用原始系统服务时，访问原始的BinderProxy</li><li>真正的系统服务接收到Binder，进行处理并返回</li></ul><hr><h2 id="总结"><a name="t3"></a><a name="t3"></a><a></a><a></a>
总结<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E6%80%BB%E7%BB%93" rel="nofollow"></a></h2>
<p>
通过以上介绍可以看到，VirtualApp在原有系统服务之上构造了代理，进而为其中的应用搭建了一套虚拟环境，应用可以无感知地运行在这其中。更进一步，我们可以设置这套虚拟环境，使其实现应用多开、非侵入式应用hook等高级功能。</p>
<hr><h2 id="参考资料"><a name="t4"></a><a name="t4"></a><a></a><a></a>
参考资料<a class="anchorjs-link" href="http://rk700.github.io/2017/03/15/virtualapp-basic/#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" rel="nofollow"></a></h2>
<ul><li><a href="https://github.com/asLody/VirtualApp" rel="nofollow">https://github.com/asLody/VirtualApp</a></li><li><a href="https://github.com/prife/VirtualAppDoc" rel="nofollow">https://github.com/prife/VirtualAppDoc</a></li><li><a href="http://gityuan.com/android/" rel="nofollow">http://gityuan.com/android/</a></li></ul>                                    

                                    </div>
                <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-b6c3c6d139.css" rel="stylesheet">
                                                <div class="more-toolbox">
                <div class="left-toolbox">
                    <ul class="toolbox-list">
                        
                        <li class="tool-item tool-active is-like "><a href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#csdnc-thumbsup" />
                        </svg><span class="name">点赞</span>
                        <span class="count"></span>
                        </a></li>
                        <li class="tool-item tool-active is-collection "><a href="javascript:;" data-report-click='{"mod":"popu_824"}'><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-csdnc-Collection-G" />
                        </svg><span class="name">收藏</span></a></li>
                        <li class="tool-item tool-active is-share"><a href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-csdnc-fenxiang" />
                        </svg>分享</a></li>
                        <!--打赏开始-->
                                                <!--打赏结束-->
                                                <li class="tool-item tool-more">
                            <a>
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024" width="200" height="200" version="1.1" p-id="5717" t="1575545411852"><defs><style type="text/css" /></defs><path d="M 179.176 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5718" /><path d="M 509.684 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5719" /><path d="M 846.175 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5720" /></svg>
                            </a>
                            <ul class="more-box">
                                <li class="item"><a class="article-report">文章举报</a></li>
                            </ul>
                        </li>
                                            </ul>
                </div>
                            </div>
            <div class="person-messagebox">
                <div class="left-message"><a href="https://blog.csdn.net/byc6352">
                    <img class="avatar_pic" src="images/android05001.jpg" username="byc6352">
                                            <img class="user-years" src="images/android05002.png">
                                    </a></div>
                <div class="middle-message">
                                        <div class="title"><span class="tit"><a href="https://blog.csdn.net/byc6352" target="_blank" data-report-click='{"mod":"popu_379"}'>byc6352</a></span>
                                            </div>
                    <div class="text"><span>发布了28 篇原创文章</span> · <span>获赞 9</span> · <span>访问量 1万+</span></div>
                </div>
                                <div class="right-message">
                                            <a class="btn btn-sm btn-red-hollow bt-button personal-letter" href="https://im.csdn.net/im/main.html?userName=byc6352" target="_blank">私信
                        </a>
                                                            <a class="btn btn-sm  bt-button personal-watch" data-report-click='{"mod":"popu_379"}'>关注</a>
                                    </div>
                            </div>
                    </div>

</div>


</body></html>