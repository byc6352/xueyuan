<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>一种绕开反病毒引擎的方法</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<article tabindex="-1" class="Post-Main Post-NormalMain"><header class="Post-Header"><h1 class="Post-Title">一种绕开反病毒引擎的方法</h1><div class="Post-Author"><div class="AuthorInfo" itemtype="http://schema.org/Person" itemscope="" itemprop="author"><meta content="weishu" itemprop="name"><meta content="https://pic1.zhimg.com/v2-818a7d7a796fbe6530639de23a01051b_l.jpg" itemprop="image"><meta content="https://www.zhihu.com/people/tian-weishu" itemprop="url"><meta itemprop="zhihu:followerCount"><span class="UserLink AuthorInfo-avatarWrapper"><div class="Popover"><div id="Popover1-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover1-content"><a class="UserLink-link" href="//www.zhihu.com/people/tian-weishu" target="_blank" data-za-detail-view-element_name="User"><img width="38" height="38" class="Avatar Avatar--round AuthorInfo-avatar" alt="weishu" src="images/android06301.jpg" srcset="https://pic1.zhimg.com/v2-818a7d7a796fbe6530639de23a01051b_l.jpg 2x"></a></div></div></span><div class="AuthorInfo-content"><div class="AuthorInfo-head"><span class="UserLink AuthorInfo-name"><div class="Popover"><div id="Popover2-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover2-content"><a class="UserLink-link" href="//www.zhihu.com/people/tian-weishu" target="_blank" data-za-detail-view-element_name="User">weishu</a></div></div><a class="UserLink-badge" href="https://www.zhihu.com/question/48509984" target="_blank" rel="noopener noreferrer" data-tooltip="优秀回答者"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--BadgeGlorious" fill="currentColor" viewBox="0 0 24 24" width="18" height="18"><g fill="none" fill-rule="evenodd"><path fill="#ff9500" d="M 2.64 13.39 c 1.068 0.895 1.808 2.733 1.66 4.113 l 0.022 -0.196 c -0.147 1.384 0.856 2.4 2.24 2.278 l -0.198 0.016 c 1.387 -0.122 3.21 0.655 4.083 1.734 l -0.125 -0.154 c 0.876 1.084 2.304 1.092 3.195 0.027 l -0.127 0.152 c 0.895 -1.068 2.733 -1.808 4.113 -1.66 l -0.198 -0.022 c 1.386 0.147 2.402 -0.856 2.279 -2.238 l 0.017 0.197 c -0.122 -1.388 0.655 -3.212 1.734 -4.084 l -0.154 0.125 c 1.083 -0.876 1.092 -2.304 0.027 -3.195 l 0.152 0.127 c -1.068 -0.895 -1.808 -2.732 -1.66 -4.113 l -0.022 0.198 c 0.147 -1.386 -0.856 -2.4 -2.24 -2.279 l 0.198 -0.017 c -1.387 0.123 -3.21 -0.654 -4.083 -1.733 l 0.125 0.153 c -0.876 -1.083 -2.304 -1.092 -3.195 -0.027 l 0.127 -0.152 c -0.895 1.068 -2.733 1.808 -4.113 1.662 l 0.198 0.02 c -1.386 -0.147 -2.4 0.857 -2.279 2.24 L 4.4 6.363 c 0.122 1.387 -0.655 3.21 -1.734 4.084 l 0.154 -0.126 c -1.083 0.878 -1.092 2.304 -0.027 3.195 l -0.152 -0.127 Z" /><path fill="#fff" d="M 12.034 14.959 L 9.379 16.58 c -0.468 0.286 -0.746 0.09 -0.617 -0.449 l 0.721 -3.025 l -2.362 -2.024 c -0.417 -0.357 -0.317 -0.681 0.236 -0.725 l 3.1 -0.249 l 1.195 -2.872 c 0.21 -0.507 0.55 -0.512 0.763 0 l 1.195 2.872 l 3.1 0.249 c 0.547 0.043 0.657 0.365 0.236 0.725 l -2.362 2.024 l 0.721 3.025 c 0.128 0.534 -0.144 0.738 -0.617 0.449 l -2.654 -1.621 Z" /></g></svg></span></a></span></div><div class="AuthorInfo-detail"><div class="AuthorInfo-badge"><div class="AuthorInfo-badgeText"><span><span><a href="//www.zhihu.com/people/tian-weishu/creations/19555634">Android 开发</a> </span>话题</span>的<!-- -->优秀回答者</div></div></div></div></div></div><div><span class="Voters"><button class="Button Button--plain" type="button">775 人<!-- -->赞同了该文章</button></span></div></header><div class="Post-RichTextContainer"><div class="RichText ztext Post-RichText"><p>前段时间，我整出了一个 <a class="internal" href="https://zhuanlan.zhihu.com/p/31620013" data-za-detail-view-id="1043">无需Root也能使用Xposed</a> 的方法，简单来说，就是通过 双开技术（VirtualApp）结合本进程内的Java Method Hook（epic）实现加载Xposed模块，从而任意修改内部App的方法。项目刚 <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">开源</a> 不久，有大量用户指责 VirtualXposed 是恶意软件，有病毒！比如说：</p><ul><li><a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/issues/10" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">VirusTotal says you have malware  · Issue #10 · android-hacker/VirtualXposed</a></li><li><a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/issues/21" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">McAfee报毒 · Issue #21 · android-hacker/VirtualXposed</a></li><li><a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/issues/8" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Galaxy Note8设备维护中提示对设备有害 · Issue #8 · android-hacker/VirtualXposed</a></li></ul><p>以及 VirusTotal的检测结果：</p><figure data-size="normal"><noscript>&amp;lt;img src="https://pic4.zhimg.com/v2-3b4cefd36b82293e8102235624c6cff3_b.jpg" data-caption="" data-size="normal" data-rawwidth="1846" data-rawheight="1198" class="origin_image zh-lightbox-thumb" width="1846" data-original="https://pic4.zhimg.com/v2-3b4cefd36b82293e8102235624c6cff3_r.jpg"/&amp;gt;</noscript><img width="1846" class="origin_image zh-lightbox-thumb lazy" src="images/android06302.jpg" data-size="normal" data-lazy-status="ok" data-actualsrc="https://pic4.zhimg.com/v2-3b4cefd36b82293e8102235624c6cff3_b.jpg" data-original="https://pic4.zhimg.com/v2-3b4cefd36b82293e8102235624c6cff3_r.jpg" data-rawheight="1198" data-rawwidth="1846" data-caption=""></figure><p>(检测报告地址：<a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//www.virustotal.com/fr/file/46f2498311c98dbb890f0642e864c703ca21b6fb8f04f8531ac8d2ea9e601e2e/analysis/1520829060/" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">VirusTotal</a> )</p><p>我当时不以为然，所以没放在心上；毕竟没有什么病毒能这么明目张胆公开把自己的代码放出来给别人用吧？</p><p>直到后来，面对部分XDA用户的质疑，以及一些国外媒体的报道，我意识到，在部分用户眼中，「病毒」这个词对他们非常敏感，16家杀毒引擎说你有病毒，就算你觉得清者自清，别人也是敬而远之。于是我就开始了“洗脱罪名”之旅。</p><p>刚开始的时候我也是无从下手，去网上搜索这些病毒的名字，什么 `Android:Agent-QBQ [PUP]`, `Tool.SilentInstaller.6.origin` 基本没有什么有意义的结果；整个代码那么多，怎么判断是哪一部分有问题，我到底应该从哪里查起？</p><p>然后我就找了几个做过病毒分析的工程师聊了聊，他们告诉我，目前一般对Android APK的静态分析方法是采用特征分析，就是提取你APK安装包里面的特征，然后拿起和病毒库做比对，如果有匹配，那么就认为你可能是有害程序。</p><p>于是我就想，如果我是病毒分析工程师，我应该提取哪些特征呢？动态加载代码，运行可执行文件，敏感包名？顺着这个想法，我做了几件事：</p><ol><li>VirtualApp中有大量的 `odex`, `dex` 等字符串，针对这些串用硬编码的base64加密串替代，运行时解密然后使用。</li><li>把所有硬编码的类名，如微信，QQ里面的类（对这些App做过特殊处理）也用base64串代替。</li><li>修改manifest中注册的组件名，避免被匹配为VirtualApp。</li></ol><p>这么做之后，依然有14家反病毒引擎认为是病毒（少了2家）；当时我有点懵，心里一万只草泥马奔腾而过。。。</p><p>这么光靠猜实在不是办法，需要有一种科学的方法去分析和解决这个问题。既然我们知道杀毒引擎会匹配特征，正向去猜测它提取的特征行不通，那么我们可以反过来，看看什么“东西”会命中它的哪些特征。具体来说，APK文件分为几个部分：Manifest，资源，dex文件（Java代码），so文件（native 代码）以及其他文件；我们可以把APK中的一部分文件剔除，然后把这个缺失某部分的APK文件拿去给反病毒引擎检测，如果前后检测结果有不同，那么说明被剔除的那部分可能就是命中了某些病毒的特征，从而被误判。当然，这种方法不一定正确，这取决于杀毒引擎如何提取特征；但是可以一试。</p><p>尝试之后发现，只有java code才会导致杀毒引擎被判为病毒；其他之前猜想的manifest组件，so文件实际上都没有问题。那么，到底是哪部分Java代码被判为有问题呢？起初我打算从依赖库的角度去做代码剔除，不过立马就被否定了——虽然我依赖了十几个三方库，但是很显然，很有可能查到最后会发现 VirtualXposed 本身的代码才是被判为病毒的根源。最后，我使用的方法是这样的：</p><p class="ztext-empty-paragraph"><br></p><ol><li>取出所有的Java类，根据全限定名排序。</li><li>按顺序删掉一半的类，然后打包成APK给反病毒引擎检测；如果有变化，那么说明被删的那部分类有问题；于是用被删的那部分类再做二分（再删除一半）继续检测，直到被锁定为一个或几个特定的类。如果没有变化，那用同样的办法对保留的那部分类做二分。</li><li>锁定到某些特定的类还不够，最好能锁定到具体的行。于是，我们可以继续以方法为粒度进行二分测试，直到定位到所有的方法。</li></ol><p>但是，光有思路是不行的。具体如何实施这个方案呢？你要删除一半的类，怎么删？很显然，如果直接删Java源码，是无法编译成功拿到最终的apk文件的。我们应该对编译产物做处理。在D8编译器出来之前，APK的打包流程是这样的：</p><figure data-size="normal"><noscript>&amp;lt;img src="https://pic4.zhimg.com/v2-75637cd077bf3228a5c9a130532cbda3_b.jpg" data-caption="" data-size="normal" data-rawwidth="510" data-rawheight="856" class="origin_image zh-lightbox-thumb" width="510" data-original="https://pic4.zhimg.com/v2-75637cd077bf3228a5c9a130532cbda3_r.jpg"/&amp;gt;</noscript><img width="510" class="origin_image zh-lightbox-thumb lazy" src="images/android06303.jpg" data-size="normal" data-lazy-status="ok" data-actualsrc="https://pic4.zhimg.com/v2-75637cd077bf3228a5c9a130532cbda3_b.jpg" data-original="https://pic4.zhimg.com/v2-75637cd077bf3228a5c9a130532cbda3_r.jpg" data-rawheight="856" data-rawwidth="510" data-caption=""></figure><p class="ztext-empty-paragraph"><br></p><p>观察Java 源码以及第三方库被打包为dex的过程，我们可以知道，删除被编译过后的class文件是可以达到目的的；而如果要控制这个过程，gradle的Transform API是个极佳的选择。</p><p>另外，其实还有一条路：Android虚拟机有一套自己的虚拟机指令smali，我们也可以反编译APK得到smali文件，删掉部分smali文件然后重打包；这样也可以达到目的，不过由于 gradle Transform API的存在，删class文件的过程实现起来简单很多，并且可操作性也强很多；再结合字节码操作工具，我们可以对apk做各种修改来试探反病毒引擎。</p><p>最终使用的代码在这：<a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//gist.github.com/tiann/42f829ae86b90934c8467f6f76dd6a85" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">fuck_anti_virus.gradle</a>。这是一个gradle插件，在项目里面直接引用即可。</p><p class="ztext-empty-paragraph"><br></p><p>经过数天对16个反病毒引擎的探测，我解决了所有被误报的问题；最终的检测结果长这样：</p><figure data-size="normal"><noscript>&amp;lt;img src="https://pic2.zhimg.com/v2-efde3748aceb14a03fcabdb472281655_b.jpg" data-caption="" data-size="normal" data-rawwidth="1652" data-rawheight="1350" class="origin_image zh-lightbox-thumb" width="1652" data-original="https://pic2.zhimg.com/v2-efde3748aceb14a03fcabdb472281655_r.jpg"/&amp;gt;</noscript><img width="1652" class="origin_image zh-lightbox-thumb lazy" src="images/android06304.jpg" data-size="normal" data-lazy-status="ok" data-actualsrc="https://pic2.zhimg.com/v2-efde3748aceb14a03fcabdb472281655_b.jpg" data-original="https://pic2.zhimg.com/v2-efde3748aceb14a03fcabdb472281655_r.jpg" data-rawheight="1350" data-rawwidth="1652" data-caption=""></figure><p class="ztext-empty-paragraph"><br></p><p>不过这里面被误判为病毒的代码，实在是让人啼笑皆非。不妨来看一下：</p><p class="ztext-empty-paragraph"><br></p><p>1. <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/commit/d8356e9bb1ac2c4dfeedb3fc531e83fb4e549a59" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">敏感API调用, `openDexFileNative`, `openDexFile`，用base64编码解决</a></p><p>2. <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/commit/b076d17afea1d5b560100793a299bfc93f4025ca" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">敏感API调用，`System.setProperty`，通过用反射调用绕过</a></p><p>3. <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/commit/51bb7813931d1afc278bc9cf8964d24f03b334a8" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">打印日志以及异常堆栈被误判（这个我没弄清楚原因，有点莫名其妙）</a></p><p>4. <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/commit/83b12aebed08beb94af6b134638764badbd1ad61" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">替换Mainifest组件名</a></p><p>5. <a class=" wrap external" href="https://link.zhihu.com/?target=https%3A//github.com/android-hacker/VirtualXposed/commit/83b12aebed08beb94af6b134638764badbd1ad61" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">修改类名，修改输入日志的姿势</a></p><p>如果第一个和第二个还能扯得上点关系，后面那几个以及我其他的修改，我想说，不是我针对谁，这些反病毒引擎简直都是智障。。。</p><p class="ztext-empty-paragraph"><br></p><p>然后分享一个最近无意中发现的代码：</p><figure data-size="normal"><noscript>&amp;lt;img src="https://pic2.zhimg.com/v2-6b1b9e0ad26b81e3606d89af7210ab85_b.jpg" data-caption="" data-size="normal" data-rawwidth="1804" data-rawheight="912" class="origin_image zh-lightbox-thumb" width="1804" data-original="https://pic2.zhimg.com/v2-6b1b9e0ad26b81e3606d89af7210ab85_r.jpg"/&amp;gt;</noscript><img width="1804" class="origin_image zh-lightbox-thumb lazy" src="images/android06305.jpg" data-size="normal" data-lazy-status="ok" data-actualsrc="https://pic2.zhimg.com/v2-6b1b9e0ad26b81e3606d89af7210ab85_b.jpg" data-original="https://pic2.zhimg.com/v2-6b1b9e0ad26b81e3606d89af7210ab85_r.jpg" data-rawheight="912" data-rawwidth="1804" data-caption=""></figure><figure data-size="normal"><noscript>&amp;lt;img src="https://pic2.zhimg.com/v2-0c0b653c482b4b3c7a4ef3504f7941fd_b.jpg" data-caption="" data-size="normal" data-rawwidth="834" data-rawheight="736" class="origin_image zh-lightbox-thumb" width="834" data-original="https://pic2.zhimg.com/v2-0c0b653c482b4b3c7a4ef3504f7941fd_r.jpg"/&amp;gt;</noscript><img width="834" class="origin_image zh-lightbox-thumb lazy" src="images/android06306.jpg" data-size="normal" data-lazy-status="ok" data-actualsrc="https://pic2.zhimg.com/v2-0c0b653c482b4b3c7a4ef3504f7941fd_b.jpg" data-original="https://pic2.zhimg.com/v2-0c0b653c482b4b3c7a4ef3504f7941fd_r.jpg" data-rawheight="736" data-rawwidth="834" data-caption=""></figure><p class="ztext-empty-paragraph"><br></p><p>这是某双开软件，动态加载的插件逆向之后的代码。刚开始看到的时候，我惊呆了。这尼玛是在直接查被双开的微信内部的数据库啊！我记得之前说过，双开软件是非常不安全的，双开软件本身对内部的APP有着完全的控制权，而且双开内部的APP对其他被双开APP的数据有着完全的访问权（比如说你在里面装了一个恶意软件，这个软件可以访问微信，支付宝的所有数据；所以把双开软件成为沙盒是不恰当的，这里面并不安全）。但是我没想到，竟然真的有人这么做，而且还是双开软件自己干的。但如果你把这个软件丢到杀毒软件里面检测呢，没错，很安全。就连 `Android:Agent-QBQ [PUP]`(Potentially Unwanted Program) 都没有。</p><p class="ztext-empty-paragraph"><br></p><p>最后我还是想说，现在的反病毒引擎真的是弱鸡。当然也可能是因为 VirusTotal是免费的，各大杀毒引擎给出的API都是比较弱鸡的版本，非常欢迎各路安全工程师前来打脸 ^_^ 还有，使用双开软件以及Xposed等功能的时候，一定要注意安全哦～</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p></div></div><div class="ContentItem-time">编辑于 2018-05-05</div><div class="Post-topicsAndReviewer"><div class="TopicList Post-Topics"><div class="Tag Topic" data-za-extra-module='{"card":{"content":{"type":"Topic","token":"19556664"}}}' data-za-detail-view-path-module="TopicItem"><span class="Tag-content"><a class="TopicLink" href="//www.zhihu.com/topic/19556664" target="_blank"><div class="Popover"><div id="Popover3-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover3-content">科技</div></div></a></span></div><div class="Tag Topic" data-za-extra-module='{"card":{"content":{"type":"Topic","token":"19603145"}}}' data-za-detail-view-path-module="TopicItem"><span class="Tag-content"><a class="TopicLink" href="//www.zhihu.com/topic/19603145" target="_blank"><div class="Popover"><div id="Popover4-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover4-content">Android</div></div></a></span></div><div class="Tag Topic" data-za-extra-module='{"card":{"content":{"type":"Topic","token":"19604414"}}}' data-za-detail-view-path-module="TopicItem"><span class="Tag-content"><a class="TopicLink" href="//www.zhihu.com/topic/19604414" target="_blank"><div class="Popover"><div id="Popover5-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover5-content">移动安全</div></div></a></span></div></div></div><div><div class="Sticky RichContent-actions is-fixed is-bottom" style="left: 586.5px; width: 690px; bottom: 0px;"><div class="ContentItem-actions" data-za-extra-module='{"card":{"content":{"type":"Post","id":"36459486"}}}' data-za-detail-view-path-module="BottomBar"><span><button class="Button VoteButton VoteButton--up" aria-label="赞同 775" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--TriangleUp VoteButton-TriangleUp" fill="currentColor" viewBox="0 0 24 24" width="10" height="10"><path fill-rule="evenodd" d="M 2 18.242 c 0 -0.326 0.088 -0.532 0.237 -0.896 l 7.98 -13.203 C 10.572 3.57 11.086 3 12 3 c 0.915 0 1.429 0.571 1.784 1.143 l 7.98 13.203 c 0.15 0.364 0.236 0.57 0.236 0.896 c 0 1.386 -0.875 1.9 -1.955 1.9 H 3.955 c -1.08 0 -1.955 -0.517 -1.955 -1.9 Z" /></svg></span>赞同 775</button><button class="Button VoteButton VoteButton--down" aria-label="反对" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--TriangleDown" fill="currentColor" viewBox="0 0 24 24" width="10" height="10"><path fill-rule="evenodd" d="M 20.044 3 H 3.956 C 2.876 3 2 3.517 2 4.9 c 0 0.326 0.087 0.533 0.236 0.896 L 10.216 19 c 0.355 0.571 0.87 1.143 1.784 1.143 s 1.429 -0.572 1.784 -1.143 l 7.98 -13.204 c 0.149 -0.363 0.236 -0.57 0.236 -0.896 c 0 -1.386 -0.876 -1.9 -1.956 -1.9 Z" /></svg></span></button></span><button class="Button BottomActions-CommentBtn Button--plain Button--withIcon Button--withLabel" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--Comment Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path fill-rule="evenodd" d="M 10.241 19.313 a 0.97 0.97 0 0 0 -0.77 0.2 a 7.908 7.908 0 0 1 -3.772 1.482 a 0.409 0.409 0 0 1 -0.38 -0.637 a 5.825 5.825 0 0 0 1.11 -2.237 a 0.605 0.605 0 0 0 -0.227 -0.59 A 7.935 7.935 0 0 1 3 11.25 C 3 6.7 7.03 3 12 3 s 9 3.7 9 8.25 s -4.373 9.108 -10.759 8.063 Z" /></svg></span>52 条评论</button><div class="Popover ShareMenu"><div class="ShareMenu-toggler" id="Popover6-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover6-content"><button class="Button Button--plain Button--withIcon Button--withLabel" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--Share Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path fill-rule="evenodd" d="M 2.931 7.89 c -1.067 0.24 -1.275 1.669 -0.318 2.207 l 5.277 2.908 l 8.168 -4.776 c 0.25 -0.127 0.477 0.198 0.273 0.39 L 9.05 14.66 l 0.927 5.953 c 0.18 1.084 1.593 1.376 2.182 0.456 l 9.644 -15.242 c 0.584 -0.892 -0.212 -2.029 -1.234 -1.796 L 2.93 7.89 Z" /></svg></span>分享</button></div></div><button class="Button ContentItem-action Button--plain Button--withIcon Button--withLabel" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--Star Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path fill-rule="evenodd" d="M 5.515 19.64 l 0.918 -5.355 l -3.89 -3.792 c -0.926 -0.902 -0.639 -1.784 0.64 -1.97 L 8.56 7.74 l 2.404 -4.871 c 0.572 -1.16 1.5 -1.16 2.072 0 L 15.44 7.74 l 5.377 0.782 c 1.28 0.186 1.566 1.068 0.64 1.97 l -3.89 3.793 l 0.918 5.354 c 0.219 1.274 -0.532 1.82 -1.676 1.218 L 12 18.33 l -4.808 2.528 c -1.145 0.602 -1.896 0.056 -1.677 -1.218 Z" /></svg></span>收藏</button><div class="Post-ActionMenuButton"><div class="Popover"><div id="Popover7-toggle" aria-expanded="false" aria-haspopup="true" aria-owns="Popover7-content"><button class="Button Button--plain Button--withIcon Button--iconOnly" type="button"><span style="display: inline-flex; align-items: center;">​<svg xmlns="http://www.w3.org/2000/svg" class="Zi Zi--Dots Button-zi" fill="currentColor" viewBox="0 0 24 24" width="1.2em" height="1.2em"><path fill-rule="evenodd" d="M 5 14 a 2 2 0 1 1 0 -4 a 2 2 0 0 1 0 4 Z m 7 0 a 2 2 0 1 1 0 -4 a 2 2 0 0 1 0 4 Z m 7 0 a 2 2 0 1 1 0 -4 a 2 2 0 0 1 0 4 Z" /></svg></span></button></div></div></div></div></div><div class="Sticky--holder" style="margin: 0px 0px 10px; left: 0px; top: auto; height: 54px; right: auto; bottom: 0px; float: none; display: block; position: static;"></div></div></article>

</div>


</body></html>