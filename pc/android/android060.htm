<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>VirtualApp源码分析——（一）VA启动_weixin_35016347的博客-CSDN博客</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="article_content clearfix" id="article_content" style="overflow: hidden;">
            <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css" rel="stylesheet">
                                        <div class="markdown_views" id="content_views">
                    <!-- flowchart 箭头图标 勿删 -->
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-linecap="round" d="M 5 0 L 0 2.5 L 5 5 Z" />
                    </svg>
                                            <p>VirtualApp（以下简称VA）是一个开源的Android app虚拟化引擎，它提供了一个虚拟空间，允许其他应用运行在这个虚拟空间中，实现应用多开（可重复安装）。</p>

<p>在VA中，host应用（VA自身）和client应用（通过VA安装的应用）<strong>具有相同的uid</strong>。 <br>
在运行时，一般会包含三个进程：</p>

<ul>
<li>io.virtualapp，主进程，负责VA的用户界面及应用管理； </li>
<li>io.virtualapp:x，服务进程，负责系统服务的代理；</li>
<li>io.virtual:pXXX，用于运行client应用的进程，应用启动后，进程名更新为应用包名。</li>
</ul>

<p>用ps命令看一下：</p>

<pre class="prettyprint" name="code"><code class="hljs avrasm has-numbering">u0_a123   <span class="hljs-number">16545</span> <span class="hljs-number">256</span>   <span class="hljs-number">1056344</span> <span class="hljs-number">84524</span> ffffffff <span class="hljs-number">00000000</span> S io<span class="hljs-preprocessor">.virtualapp</span>
u0_a123   <span class="hljs-number">16607</span> <span class="hljs-number">256</span>   <span class="hljs-number">909252</span> <span class="hljs-number">36140</span> ffffffff <span class="hljs-number">00000000</span> S io<span class="hljs-preprocessor">.virtualapp</span>:<span class="hljs-built_in">x</span>
u0_a123   <span class="hljs-number">16674</span> <span class="hljs-number">256</span>   <span class="hljs-number">914872</span> <span class="hljs-number">40004</span> ffffffff <span class="hljs-number">00000000</span> S <span class="hljs-keyword">com</span><span class="hljs-preprocessor">.example</span><span class="hljs-preprocessor">.test</span></code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre>

<p>下面从源码分析一下VA启动与运行的整个过程：</p>

<p>VA的Application为VApp，包路径为io.virtualapp，是一个继承自MultiDexApplication的Application。这个类重写了<code>attachBaseContext()</code>方法，程序启动后首先运行该方法，再调用<code>oncreate()</code>方法。先看一下这个attachBaseContext方法做了什么：</p>

<pre class="prettyprint" name="code"><code class="hljs cs has-numbering">    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attachBaseContext</span>(Context <span class="hljs-keyword">base</span>) {
        super.attachBaseContext(<span class="hljs-keyword">base</span>);
        mPreferences = <span class="hljs-keyword">base</span>.getSharedPreferences(<span class="hljs-string">"va"</span>, Context.MODE_MULTI_PROCESS);
        VASettings.ENABLE_IO_REDIRECT = <span class="hljs-keyword">true</span>;
        VASettings.ENABLE_INNER_SHORTCUT = <span class="hljs-keyword">false</span>;
        <span class="hljs-keyword">try</span> {
            VirtualCore.<span class="hljs-keyword">get</span>().startup(<span class="hljs-keyword">base</span>);
        } <span class="hljs-keyword">catch</span> (Throwable e) {
            e.printStackTrace();
        }
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li></ul></pre>

<p>除了设置一些属性，主要有这么一句：<code>VirtualCore.get().startup(base);</code> <br>
VirtualCore是定义在包com.lody.virtual.client.core中的一个类，<code>get()</code>首先返回一个重点内容静态的VirtualCore对象，然后调用该对象的<code>startup()</code>方法进行一些初始化操作，看下这个方法的代码：</p>

<pre class="prettyprint" name="code"><code class="hljs java has-numbering">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startup</span>(Context context) <span class="hljs-keyword">throws</span> Throwable {
        <span class="hljs-keyword">if</span> (!isStartUp) {
            <span class="hljs-comment">// step 1</span>
            <span class="hljs-keyword">if</span> (Looper.myLooper() != Looper.getMainLooper()) {
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"VirtualCore.startup() must called in main thread."</span>);
            }
            VASettings.STUB_CP_AUTHORITY = context.getPackageName() + <span class="hljs-string">"."</span> + VASettings.STUB_DEF_AUTHORITY;
            ServiceManagerNative.SERVICE_CP_AUTH = context.getPackageName() + <span class="hljs-string">"."</span> + ServiceManagerNative.SERVICE_DEF_AUTH;
            <span class="hljs-comment">// step 2</span>
            <span class="hljs-keyword">this</span>.context = context;
            mainThread = ActivityThread.currentActivityThread.call();
            unHookPackageManager = context.getPackageManager();
            hostPkgInfo = unHookPackageManager.getPackageInfo(context.getPackageName(), PackageManager.GET_PROVIDERS);
            IPCBus.initialize(<span class="hljs-keyword">new</span> IServerCache() {
                <span class="hljs-annotation">@Override</span>
                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">join</span>(String serverName, IBinder binder) {
                    ServiceCache.addService(serverName, binder);
                }

                <span class="hljs-annotation">@Override</span>
                <span class="hljs-keyword">public</span> IBinder <span class="hljs-title">query</span>(String serverName) {
                    <span class="hljs-keyword">return</span> ServiceManagerNative.getService(serverName);
                }
            });
            <span class="hljs-comment">// step 3</span>
            detectProcessType();
            <span class="hljs-comment">// step 4</span>
            InvocationStubManager invocationStubManager = InvocationStubManager.getInstance();
            invocationStubManager.init();
            invocationStubManager.injectAll();
            <span class="hljs-comment">// step 5</span>
            ContextFixer.fixContext(context);
            isStartUp = <span class="hljs-keyword">true</span>;
            <span class="hljs-keyword">if</span> (initLock != <span class="hljs-keyword">null</span>) {
                initLock.open();
                initLock = <span class="hljs-keyword">null</span>;
            }
        }
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li></ul></pre>

<p><strong>step 1.</strong> 首先判断当前进程是否为主进程，因为VApp作为应用程序的入口，多进程情况下会被调用多次； <br>
<strong>step 2.</strong> 依次获取当前线程mainThread、调用context的getPackageManager方法获得包管理器unHookPackageManager（后面会对该对象做hook），以及包管理器的getPackageInfo方法获得包信息PackageInfo对象hostPkgInfo； <br>
<strong>step 3.</strong> 接下来调用<code>detectProcessType()</code>，主要是获取包名、主进程名和当前进程名，通过对比判断进程类型，主要是四种：主进程、服务进程（以:x结尾）、客户端进程（VActivityManager的<code>isAppProcess()</code>方法）和子进程； <br>
<strong>step 4.</strong> 创建了InvocationStubManager类对象invocationStubManager，然后分别调用了该对象的<code>init()</code>和<code>injectAll()</code>方法，依次完成InvocationStubManager的初始化和执行系统的注入； <br>
<strong>step 5.</strong> 完成一些上下文的恢复与检查。</p>

<p>然后我们先详细看下第四步中的注入过程，首先是<code>invocationStubManager.init()</code>：</p>

<pre class="prettyprint" name="code"><code class="hljs java has-numbering">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span>() <span class="hljs-keyword">throws</span> Throwable {
        <span class="hljs-keyword">if</span> (isInit()) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">"InvocationStubManager Has been initialized."</span>);
        }
        injectInternal();
        sInit = <span class="hljs-keyword">true</span>;
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li></ul></pre>

<p>代码很简单，主要是调用了<code>injectInternal()</code>这个方法，继续看代码：</p>



<pre class="prettyprint" name="code"><code class="hljs cs has-numbering">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">injectInternal</span>() throws Throwable {
        <span class="hljs-keyword">if</span> (VirtualCore.<span class="hljs-keyword">get</span>().isMainProcess()) {
            <span class="hljs-keyword">return</span>;
        }
        <span class="hljs-keyword">if</span> (VirtualCore.<span class="hljs-keyword">get</span>().isServerProcess()) {
            addInjector(<span class="hljs-keyword">new</span> ActivityManagerStub());
            addInjector(<span class="hljs-keyword">new</span> PackageManagerStub());
            <span class="hljs-keyword">return</span>;
        }
        <span class="hljs-keyword">if</span> (VirtualCore.<span class="hljs-keyword">get</span>().isVAppProcess()) {
            addInjector(<span class="hljs-keyword">new</span> LibCoreStub());
            addInjector(<span class="hljs-keyword">new</span> ActivityManagerStub());
            addInjector(<span class="hljs-keyword">new</span> PackageManagerStub());
            addInjector(HCallbackStub.getDefault());
            addInjector(<span class="hljs-keyword">new</span> ISmsStub());
            addInjector(<span class="hljs-keyword">new</span> ISubStub());
            addInjector(<span class="hljs-keyword">new</span> DropBoxManagerStub());
            addInjector(<span class="hljs-keyword">new</span> NotificationManagerStub());
            addInjector(<span class="hljs-keyword">new</span> LocationManagerStub());
            addInjector(<span class="hljs-keyword">new</span> WindowManagerStub());
            addInjector(<span class="hljs-keyword">new</span> ClipBoardStub());
            addInjector(<span class="hljs-keyword">new</span> MountServiceStub());
            addInjector(<span class="hljs-keyword">new</span> BackupManagerStub());
            addInjector(<span class="hljs-keyword">new</span> TelephonyStub());
            addInjector(<span class="hljs-keyword">new</span> TelephonyRegistryStub());
            addInjector(<span class="hljs-keyword">new</span> PhoneSubInfoStub());
            addInjector(<span class="hljs-keyword">new</span> PowerManagerStub());
            addInjector(<span class="hljs-keyword">new</span> AppWidgetManagerStub());
            addInjector(<span class="hljs-keyword">new</span> AccountManagerStub());
            addInjector(<span class="hljs-keyword">new</span> AudioManagerStub());
            addInjector(<span class="hljs-keyword">new</span> SearchManagerStub());
            addInjector(<span class="hljs-keyword">new</span> ContentServiceStub());
            addInjector(<span class="hljs-keyword">new</span> ConnectivityStub());

            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= JELLY_BEAN_MR2) {
                addInjector(<span class="hljs-keyword">new</span> VibratorStub());
                addInjector(<span class="hljs-keyword">new</span> WifiManagerStub());
                addInjector(<span class="hljs-keyword">new</span> BluetoothStub());
                addInjector(<span class="hljs-keyword">new</span> ContextHubServiceStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= JELLY_BEAN_MR1) {
                addInjector(<span class="hljs-keyword">new</span> UserManagerStub());
            }

            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= JELLY_BEAN_MR1) {
                addInjector(<span class="hljs-keyword">new</span> DisplayStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= LOLLIPOP) {
                addInjector(<span class="hljs-keyword">new</span> PersistentDataBlockServiceStub());
                addInjector(<span class="hljs-keyword">new</span> InputMethodManagerStub());
                addInjector(<span class="hljs-keyword">new</span> MmsStub());
                addInjector(<span class="hljs-keyword">new</span> SessionManagerStub());
                addInjector(<span class="hljs-keyword">new</span> JobServiceStub());
                addInjector(<span class="hljs-keyword">new</span> RestrictionStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= KITKAT) {
                addInjector(<span class="hljs-keyword">new</span> AlarmManagerStub());
                addInjector(<span class="hljs-keyword">new</span> AppOpsManagerStub());
                addInjector(<span class="hljs-keyword">new</span> MediaRouterServiceStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= LOLLIPOP_MR1) {
                addInjector(<span class="hljs-keyword">new</span> GraphicsStatsStub());
                addInjector(<span class="hljs-keyword">new</span> UsageStatsManagerStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= M) {
                addInjector(<span class="hljs-keyword">new</span> FingerprintManagerStub());
                addInjector(<span class="hljs-keyword">new</span> NetworkManagementStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= N) {
                addInjector(<span class="hljs-keyword">new</span> WifiScannerStub());
                addInjector(<span class="hljs-keyword">new</span> ShortcutServiceStub());
                addInjector(<span class="hljs-keyword">new</span> DevicePolicyManagerStub());
            }
            <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">26</span>) {
                addInjector(<span class="hljs-keyword">new</span> AutoFillManagerStub());
            }
        }
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li><li style="color: rgb(153, 153, 153);">42</li><li style="color: rgb(153, 153, 153);">43</li><li style="color: rgb(153, 153, 153);">44</li><li style="color: rgb(153, 153, 153);">45</li><li style="color: rgb(153, 153, 153);">46</li><li style="color: rgb(153, 153, 153);">47</li><li style="color: rgb(153, 153, 153);">48</li><li style="color: rgb(153, 153, 153);">49</li><li style="color: rgb(153, 153, 153);">50</li><li style="color: rgb(153, 153, 153);">51</li><li style="color: rgb(153, 153, 153);">52</li><li style="color: rgb(153, 153, 153);">53</li><li style="color: rgb(153, 153, 153);">54</li><li style="color: rgb(153, 153, 153);">55</li><li style="color: rgb(153, 153, 153);">56</li><li style="color: rgb(153, 153, 153);">57</li><li style="color: rgb(153, 153, 153);">58</li><li style="color: rgb(153, 153, 153);">59</li><li style="color: rgb(153, 153, 153);">60</li><li style="color: rgb(153, 153, 153);">61</li><li style="color: rgb(153, 153, 153);">62</li><li style="color: rgb(153, 153, 153);">63</li><li style="color: rgb(153, 153, 153);">64</li><li style="color: rgb(153, 153, 153);">65</li><li style="color: rgb(153, 153, 153);">66</li><li style="color: rgb(153, 153, 153);">67</li><li style="color: rgb(153, 153, 153);">68</li><li style="color: rgb(153, 153, 153);">69</li><li style="color: rgb(153, 153, 153);">70</li><li style="color: rgb(153, 153, 153);">71</li><li style="color: rgb(153, 153, 153);">72</li><li style="color: rgb(153, 153, 153);">73</li><li style="color: rgb(153, 153, 153);">74</li><li style="color: rgb(153, 153, 153);">75</li><li style="color: rgb(153, 153, 153);">76</li><li style="color: rgb(153, 153, 153);">77</li><li style="color: rgb(153, 153, 153);">78</li></ul></pre>

<p>简单的看就是判断当前进程类型，然后通过addInjector方法添加XXXStub对象，具体为：</p>

<ul>
<li>MainProcess：直接返回；</li>
<li>ServerProcess：添加ActivityManagerStub和PackageManagerStub对象；</li>
<li>VAppProcess：添加LibCoreStub、ActivityManagerStub、PackageManagerStub等；</li>
</ul>

<p><em>说明：这里注入其实就是完成Java层的hook操作，自身app当然不需要hook，服务进程需要管理应用因此需要hook AMS和PMS，而对于应用进程，则需要hook整个framework框架，保证所有调用重定向到VA的框架里。</em></p>

<p>这里的添加操作：</p>

<pre class="prettyprint" name="code"><code class="hljs cs has-numbering">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInjector</span>(IInjector IInjector) {
        mInjectors.put(IInjector.getClass(), IInjector);
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre>

<p>就是将新建的Stub对象添加到Map</p>

<pre class="prettyprint" name="code"><code class="hljs java has-numbering">    <span class="hljs-keyword">public</span> <span class="hljs-title">ActivityManagerStub</span>() {
        <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span> MethodInvocationStub&lt;&gt;(ActivityManagerNative.getDefault.call()));
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre>

<p>可以看到，这个构造函数中，首先新建了一个MethodInvocationStub对象，参数是通过反射调用ActivityManagerNative的<code>getDefault()</code>获取的接口对象。再看MethodInvocationStub的构造函数，最终都会调到这个函数：</p>

<pre class="prettyprint" name="code"><code class="hljs r has-numbering">    public MethodInvocationStub(<span class="hljs-literal">T</span> baseInterface, Class&lt;?&gt;<span class="hljs-keyword">...</span> proxyInterfaces) {
        this.mBaseInterface = baseInterface;
        <span class="hljs-keyword">if</span> (baseInterface != null) {
            <span class="hljs-keyword">if</span> (proxyInterfaces == null) {
                proxyInterfaces = MethodParameterUtils.getAllInterface(baseInterface.getClass());
            }
            mProxyInterface = (<span class="hljs-literal">T</span>) Proxy.newProxyInstance(baseInterface.getClass().getClassLoader(), proxyInterfaces, new HookInvocationHandler());
        } <span class="hljs-keyword">else</span> {
            VLog.d(TAG, <span class="hljs-string">"Unable to build HookDelegate: %s."</span>, getIdentityName());
        }
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li></ul></pre>

<p>首先保存第一个参数，也即前面传入的ActivityManagerNative实例对象，然后获取这个实例对象对应Class对象的所有接口proxyInterfaces，通过Proxy.newProxyInstance()来构建ActivityManager的动态接口代理对象mProxyInterface，其中HookInvocationHandler对象处理代理后的执行逻辑。 <br>
初始化的工作到这里就做完了，接下来是<code>invocationStubManager.injectAll()</code>：</p>

<pre class="prettyprint" name="code"><code class="hljs scss has-numbering">    void <span class="hljs-function">injectAll()</span> throws Throwable {
        for (IInjector injector <span class="hljs-value">: mInjectors.values()) {
            injector.inject();</span>
        }
        <span class="hljs-comment">// XXX: Lazy inject the Instrumentation,</span>
        <span class="hljs-function">addInjector(AppInstrumentation.<span class="hljs-function">getDefault()</span>)</span>;
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li></ul></pre>

<p>其实就是一个遍历，对每个添加的Injectors执行对应的<code>inject()</code>，注意最后，对于Instrumentation这个类执行的是一个懒注入，因为这个类设计application和activity生命周期的跟踪测试。那么继续来看ActivityManagerStub的<code>inject()</code>方法：</p>



<pre class="prettyprint" name="code"><code class="hljs avrasm has-numbering">    public void inject() throws Throwable {
        if (BuildCompat<span class="hljs-preprocessor">.isOreo</span>()) {
            //Android Oreo(<span class="hljs-number">8.</span><span class="hljs-built_in">X</span>)
            Object singleton = ActivityManagerOreo<span class="hljs-preprocessor">.IActivityManagerSingleton</span><span class="hljs-preprocessor">.get</span>()<span class="hljs-comment">;</span>
            Singleton<span class="hljs-preprocessor">.mInstance</span><span class="hljs-preprocessor">.set</span>(singleton, getInvocationStub()<span class="hljs-preprocessor">.getProxyInterface</span>())<span class="hljs-comment">;</span>
        } else {
            if (ActivityManagerNative<span class="hljs-preprocessor">.gDefault</span><span class="hljs-preprocessor">.type</span>() == IActivityManager<span class="hljs-preprocessor">.TYPE</span>) {
                ActivityManagerNative<span class="hljs-preprocessor">.gDefault</span><span class="hljs-preprocessor">.set</span>(getInvocationStub()<span class="hljs-preprocessor">.getProxyInterface</span>())<span class="hljs-comment">;</span>
            } else if (ActivityManagerNative<span class="hljs-preprocessor">.gDefault</span><span class="hljs-preprocessor">.type</span>() == Singleton<span class="hljs-preprocessor">.TYPE</span>) {
                Object gDefault = ActivityManagerNative<span class="hljs-preprocessor">.gDefault</span><span class="hljs-preprocessor">.get</span>()<span class="hljs-comment">;</span>
                Singleton<span class="hljs-preprocessor">.mInstance</span><span class="hljs-preprocessor">.set</span>(gDefault, getInvocationStub()<span class="hljs-preprocessor">.getProxyInterface</span>())<span class="hljs-comment">;</span>
            }
        }
        BinderInvocationStub hookAMBinder = new BinderInvocationStub(getInvocationStub()<span class="hljs-preprocessor">.getBaseInterface</span>())<span class="hljs-comment">;</span>
        hookAMBinder<span class="hljs-preprocessor">.copyMethodProxies</span>(getInvocationStub())<span class="hljs-comment">;</span>
        ServiceManager<span class="hljs-preprocessor">.sCache</span><span class="hljs-preprocessor">.get</span>()<span class="hljs-preprocessor">.put</span>(Context<span class="hljs-preprocessor">.ACTIVITY</span>_SERVICE, hookAMBinder)<span class="hljs-comment">;</span>
    }</code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li></ul></pre>

<p>首先是ActivityManagerNative.gDefault获取AMN的实例对象，然后getInvocationStub().getProxyInterface()获取代理对象的接口对象，进行设置； <br>
接下来getInvocationStub().getBaseInterface()获取的原始接口对象，作为参数传入，新建一个BinderInvocationStub对象，这里面就完成了method代理的添加，最后调用BinderInvocationStub对象hookAMBinder的的<code>copyMethodProxies()</code>方法，将所有的方法代理添加到MethodInvocationStub的Map表中。</p>

<p>至此，InvocationStubManager的工作就全部结束了（to-do：hook的具体实现），VA的初始化工作也全部完成了，接下来我们继续看<code>oncreate()</code>方法：</p>

<pre class="prettyprint" name="code"><code class="hljs coffeescript has-numbering">    public <span class="hljs-reserved">void</span> onCreate() {
        gApp = <span class="hljs-keyword">this</span>;
        <span class="hljs-keyword">super</span>.onCreate();
        VirtualCore virtualCore = VirtualCore.get();
        virtualCore.initialize(<span class="hljs-keyword">new</span> VirtualCore.VirtualInitializer() {

            <span class="hljs-property">@Override</span>
            public <span class="hljs-reserved">void</span> onMainProcess() {
                Once.initialise(VApp.<span class="hljs-keyword">this</span>);
                <span class="hljs-keyword">new</span> FlurryAgent.Builder()
                        .withLogEnabled(<span class="hljs-literal">true</span>)
                        .withListener<span class="hljs-function"><span class="hljs-params">(() -&gt; {
                            <span class="hljs-regexp">//</span> nothing
                        })</span>
                        .<span class="hljs-title">build</span><span class="hljs-params">(VApp.<span class="hljs-keyword">this</span>, <span class="hljs-string">"48RJJP7ZCZZBB6KMMWW5"</span>)</span>;
            }

            @<span class="hljs-title">Override</span>
            <span class="hljs-title">public</span> <span class="hljs-title">void</span> <span class="hljs-title">onVirtualProcess</span><span class="hljs-params">()</span> {
                //<span class="hljs-title">listener</span> <span class="hljs-title">components</span>
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">setComponentDelegate</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyComponentDelegate())</span>;
                //<span class="hljs-title">fake</span> <span class="hljs-title">phone</span> <span class="hljs-title">imei</span>,<span class="hljs-title">macAddress</span>,<span class="hljs-title">BluetoothAddress</span>
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">setPhoneInfoDelegate</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyPhoneInfoDelegate())</span>;
                //<span class="hljs-title">fake</span> <span class="hljs-title">task</span> <span class="hljs-title">description</span>'<span class="hljs-title">s</span> <span class="hljs-title">icon</span> <span class="hljs-title">and</span> <span class="hljs-title">title</span>
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">setTaskDescriptionDelegate</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyTaskDescriptionDelegate())</span>;
            }

            @<span class="hljs-title">Override</span>
            <span class="hljs-title">public</span> <span class="hljs-title">void</span> <span class="hljs-title">onServerProcess</span><span class="hljs-params">()</span> {
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">setAppRequestListener</span><span class="hljs-params">(<span class="hljs-keyword">new</span> MyAppRequestListener(VApp.<span class="hljs-keyword">this</span>))</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.tencent.mobileqq"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.tencent.mobileqqi"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.tencent.minihd.qq"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.tencent.qqlite"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.facebook.katana"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.whatsapp"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.tencent.mm"</span>)</span>;
                <span class="hljs-title">virtualCore</span>.<span class="hljs-title">addVisibleOutsidePackage</span><span class="hljs-params">(<span class="hljs-string">"com.immomo.momo"</span>)</span>;
            }
        });
    }</span></code><ul class="pre-numbering"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li><li style="color: rgb(153, 153, 153);">20</li><li style="color: rgb(153, 153, 153);">21</li><li style="color: rgb(153, 153, 153);">22</li><li style="color: rgb(153, 153, 153);">23</li><li style="color: rgb(153, 153, 153);">24</li><li style="color: rgb(153, 153, 153);">25</li><li style="color: rgb(153, 153, 153);">26</li><li style="color: rgb(153, 153, 153);">27</li><li style="color: rgb(153, 153, 153);">28</li><li style="color: rgb(153, 153, 153);">29</li><li style="color: rgb(153, 153, 153);">30</li><li style="color: rgb(153, 153, 153);">31</li><li style="color: rgb(153, 153, 153);">32</li><li style="color: rgb(153, 153, 153);">33</li><li style="color: rgb(153, 153, 153);">34</li><li style="color: rgb(153, 153, 153);">35</li><li style="color: rgb(153, 153, 153);">36</li><li style="color: rgb(153, 153, 153);">37</li><li style="color: rgb(153, 153, 153);">38</li><li style="color: rgb(153, 153, 153);">39</li><li style="color: rgb(153, 153, 153);">40</li><li style="color: rgb(153, 153, 153);">41</li></ul></pre>

<p>首先还是通过<code>VirtualCore.get()</code>获取VirtualCore静态对象virtualCore，然后调用<code>VirtualCore.VirtualInitializer()</code>初始化四种进程类型的情况：</p>

<ol>
<li>主进程 <br>
 先执行<code>Once.initialise(VApp.this)</code>进行初始化操作； <br>
 然后后面一句初始化Flurry SDK，启用日志并调用build方法，两个参数分别为应用和API_Key，用于统计应用使用情况（可忽略）。</li>
<li>客户端进程 <br>
 主要是调用了virtualCore的setComponentDelegate、setPhoneInfoDelegate和setTaskDescriptionDelegate方法，主要是为了设置自己的代理，如在组建的生命周期前后添加一些自己的操作、伪造设备信息等。</li>
<li>服务进程 <br>
 首先是调用了virtualCore的setAppRequestListener方法，伪造了自己的应用请求监听器； <br>
 然后调用了virtualCore的addVisibleOutsidePackage方法，设置包对外部可见。</li>
</ol>

<p>至此，VA的Application启动过程就分析完成。</p>                                    </div>
                <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-b6c3c6d139.css" rel="stylesheet">
                                                <div class="more-toolbox">
                <div class="left-toolbox">
                    <ul class="toolbox-list">
                        
                        <li class="tool-item tool-active is-like "><a href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#csdnc-thumbsup" />
                        </svg><span class="name">点赞</span>
                        <span class="count">3</span>
                        </a></li>
                        <li class="tool-item tool-active is-collection "><a href="javascript:;" data-report-click='{"mod":"popu_824"}'><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-csdnc-Collection-G" />
                        </svg><span class="name">收藏</span></a></li>
                        <li class="tool-item tool-active is-share"><a href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" class="icon" aria-hidden="true">
                            <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-csdnc-fenxiang" />
                        </svg>分享</a></li>
                        <!--打赏开始-->
                                                <!--打赏结束-->
                                                <li class="tool-item tool-more">
                            <a>
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024" width="200" height="200" version="1.1" p-id="5717" t="1575545411852"><defs><style type="text/css" /></defs><path d="M 179.176 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5718" /><path d="M 509.684 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5719" /><path d="M 846.175 499.222 m -113.245 0 a 113.245 113.245 0 1 0 226.49 0 a 113.245 113.245 0 1 0 -226.49 0 Z" p-id="5720" /></svg>
                            </a>
                            <ul class="more-box">
                                <li class="item"><a class="article-report">文章举报</a></li>
                            </ul>
                        </li>
                                            </ul>
                </div>
                            </div>
            <div class="person-messagebox">
                <div class="left-message"><a href="https://blog.csdn.net/weixin_35016347">
                    <img class="avatar_pic" src="images/android06001.jpg" username="weixin_35016347">
                                            <img class="user-years" src="images/android06002.png">
                                    </a></div>
                <div class="middle-message">
                                        <div class="title"><span class="tit"><a href="https://blog.csdn.net/weixin_35016347" target="_blank" data-report-click='{"mod":"popu_379"}'>喵吉诃德</a></span>
                                            </div>
                    <div class="text"><span>发布了27 篇原创文章</span> · <span>获赞 5</span> · <span>访问量 1万+</span></div>
                </div>
                                <div class="right-message">
                                            <a class="btn btn-sm btn-red-hollow bt-button personal-letter" href="https://im.csdn.net/im/main.html?userName=weixin_35016347" target="_blank">私信
                        </a>
                                                            <a class="btn btn-sm  bt-button personal-watch" data-report-click='{"mod":"popu_379"}'>关注</a>
                                    </div>
                            </div>
                    </div>

</div>


</body></html>