<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Delphi IDFtp用法</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div id="d_content" style="width: 100%; height: auto; overflow: hidden; font-size: 15px; -ms-word-break: break-all; -ms-word-wrap: break-word;"><pre><code class="delphi hljs"> <div><span class="hljs-number">1</span> &nbsp;连接远程服务器</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Connect</span><span class="hljs-params">(AAutoLogin: boolean; <span class="hljs-keyword">const</span> ATimeout: Integer)</span>;</span></div><div><span class="hljs-number">2</span> &nbsp;改变目录</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">ChangeDir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ADirName: <span class="hljs-keyword">string</span>)</span>;</span></div><div><span class="hljs-number">3</span> &nbsp;下载</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; ADest: TStream; AResume: Boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ACanOverwrite: boolean; AResume: Boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><span class="hljs-number">4</span> &nbsp;上传</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASource: TStream; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> AAppend: boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> AAppend: boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><span class="hljs-number">5</span> &nbsp;删除</div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-keyword">const</span> AFilename: <span class="hljs-keyword">string</span>)</span>;</span></div><div><br></div><div><br></div><div>判断是否连接</div><div><span class="hljs-keyword">if</span> &nbsp;IdFTP1.Connected &nbsp;then</div><div>begin</div><div>...........</div><div><span class="hljs-keyword">end</span>;&nbsp;</div><div><br></div><div>引用别人一下,做为自己以后笔记</div><div><br></div><div>&nbsp; &nbsp; 现在很多应用都需要上传与下载大型文件，通过HTTP方式上传大文件有一定的局限性。幸好FTP作为一个非常老而且非常成熟的协议可以高效稳定地完成大文件的上传下载，并且可以完美地实现续传。就拿我写的电影服务器管理端程序来说，各种方案比较后，发现使用FTP可以完美地实现要求。但是要通过WinSocket库实现FTP比较麻烦，幸好有Indy--一个包装了大多数网络协议的组件包。&nbsp;</div><div>&nbsp; &nbsp; &nbsp;通过Indy，程序设计人员可以通过阻塞方式进行编程，可以抛开蹩脚的Winsocket异步模式，采用与Unix系统上等同的阻塞编程模式进行。这样，程序员就可以很好的处理程序的运行流程。</div><div>&nbsp; &nbsp; &nbsp;下面，我们进入到Indy的TIdFtp世界。</div><div><br></div><div><span class="hljs-number">1</span>.控件的说明</div><div><br></div><div>&nbsp; &nbsp; &nbsp;使用Indy <span class="hljs-number">9</span>中的TIdFtp控件可以实现通过FTP方式进行文件的上传与下载。</div><div><br></div><div><span class="hljs-number">2</span>.控件的具体使用</div><div><br></div><div>（<span class="hljs-number">1</span>）控件属性设置</div><div><br></div><div>&nbsp; &nbsp; &nbsp;默认属性即可，与服务器连接直接相关的属性如主机名与用户等在建立连接时进行设定。需要设定的是RecvBufferSize和SendBufferSize两属性的值。另外需要根据要传输的文件类型指定TransferType属性，而其他属性按默认值设定即可。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;RecvBufferSize说明（默认值为<span class="hljs-number">8192</span>字节）：该属性为整型变量，用于指定连接所用的接受缓冲区大小。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;SendBufferSize说明（默认值为<span class="hljs-number">32768</span>字节）：该属性也为整型变量，用于指定连接所用的发送缓冲区的最大值。该属性在WriteStream方法中时，可用于TStream指定要发送内容的块数。如果要发送的内容大于本属性值，则发送内容被分为多个块发送。</div><div><br></div><div>TransferType说明（默认值为ftBinary）：该属性为TIdFTPTransferType型变量。用于指定传输内容是二进制文件（ftBinary ）还是ASCII文件（ftASCII）。应用程序需要使用二进制方式传输可执行文件、压缩文件和多媒体文件等；而使用ASCII方式传输文本或超文本等文本型数据。</div><div><br></div><div>（<span class="hljs-number">2</span>）控件的事件响应</div><div><br></div><div>&nbsp; &nbsp; &nbsp;OnDisconnected响应：TNotifyEvent类，用于响应断开（disconnect）事件。当Disconnect方法被调用用来关闭Socket的时候，触发该响应。应用程序必须指定该事件响应的过程，以便对该断开事件进行相应。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;OnStatus响应：TIdStatusEvent类。该响应在当前连接的状态变化时被触发。该事件可由DoStatus方法触发并提供给事件控制器属性。axStatus是当前连接的TIdStatus值；aaArgs是一个可选的参数用于格式化函数，它将用于构造表现当前连接状态的文本消息。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;OnWork响应：OnWord是TWorkEvent类事件的响应控制器。OnWork用于关联DoWork方法当缓冲区读写操作被调用时通知Indy组件和类。它一般被用于控制进度条和视窗元素的更新。AWorkMode表示当前操作的模式，其中：wmRead-组件正在读取数据；wmWrite-组件正在发送数据。AWorkCount指示当前操作的字节计数。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;OnWorkBegin响应：TWorkBeginEvent类。当缓冲区读写操作初始化时，该事件关联BeginWork方法用于通知Indy组件和类。它一般被用于控制进度条和视窗元素的更新。AWorkMode表示当前操作的模式，其中：wmRead-组件正在读取数据；wmWrite-组件正在发送数据。AWorkCountMax用于指示发送到OnWorkBegin事件的操作的最大字节数，<span class="hljs-number">0</span>值代表未知。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;OnWorkEnd响应：TWorkEndEvent类。当缓冲区读写操作终止时，该事件关联EndWork方法用于通知Indy组件和类。AWorkMode表示当前操作的模式，其中：wmRead-组件正在读取数据；wmWrite-组件正在发送数据。AWorkCount表示操作的字节数。</div><div><br></div><div>在事件响应中，主要通过上述五种事件响应来控制程序。在一般情况下，在OnDisconnected中设定连接断开的界面通知；在OnStatus中设定当前操作的状态；在OnWork中实现传输中状态条和其他参数的显示；而在OnWorkBegin和OnWorkEnd中分别设定开始传输和传输结束时的界面。</div><div><br></div><div>（<span class="hljs-number">3</span>）连接远程服务器</div><div><br></div><div>&nbsp; &nbsp; &nbsp;完成了设定控件属性和实现了控件的事件响应后，就可以与服务器进行交互和传输了。在连接之前，应首先判断IdFtp是否处于连接状态，如果Connected为False，则通过界面控件或其他方式指定与服务器连接相关的一些TCP类属性的设置，分别是：Host（主机名）:<span class="hljs-keyword">String</span>、Username（用户名）:<span class="hljs-keyword">String</span>、Password（密码）:<span class="hljs-keyword">String</span>，也可以指定Port(端口)。之后调用Connect方法连接远程服务器，如果无异常出现则连接成功建立。</div><div><br></div><div>过程说明：<span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Connect</span><span class="hljs-params">(AAutoLogin: boolean; <span class="hljs-keyword">const</span> ATimeout: Integer)</span>;</span></div><div><br></div><div>该过程连接远程FTP服务器</div><div><br></div><div>属性：AAutoLogin: boolean = True</div><div><br></div><div>连接后自动登录，该参数默认为True。</div><div><br></div><div><span class="hljs-keyword">const</span> ATimeout: Integer = IdTimeoutDefault</div><div><br></div><div>超时时间，单位：秒。</div><div><br></div><div>示例代码：</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">if</span> IdFTP1.Connected <span class="hljs-keyword">then</span> <span class="hljs-keyword">try</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> TransferrignData <span class="hljs-keyword">then</span> IdFTP1.Abort;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;IdFTP1.Quit;</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">finally</span></div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">end</span></div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">else</span> <span class="hljs-keyword">with</span> IdFTP1 <span class="hljs-keyword">do</span> <span class="hljs-keyword">try</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp;Username := UserIDEdit.Text;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;Password := PasswordEdit.Text;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;Host := FtpServerEdit.Text;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;Connect;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;ChangeDir(CurrentDirEdit.Text);</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">finally</span></div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>（<span class="hljs-number">4</span>）改变目录</div><div><br></div><div>&nbsp; &nbsp; &nbsp;连接建立后，可以改变当前FTP会话所在的目录。对于已知绝对路径的情况下，可以直接调用ChangeDir(<span class="hljs-keyword">const</span> ADirName: <span class="hljs-keyword">string</span>)方法来转换目录，ADirName表示服务器上的文件系统目录，另外还可以调用ChangeDirUp回到上级目录。</div><div><br></div><div>&nbsp; &nbsp; &nbsp;如果未知路径，则可以通过List(ADest: TStrings; <span class="hljs-keyword">const</span> ASpecifier: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADetails: boolean)过程获取远程服务器的当前目录结构，此时必须设定TransferType为ftASCII（ASCII模式），其中：ADest保存当前目录结构，可以在后续程序中调用该列表。另外可以通过RetrieveCurrentDir方法获取当前目录名。</div><div><br></div><div>过程说明：</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">ChangeDir</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ADirName: <span class="hljs-keyword">string</span>)</span>;</span></div><div><br></div><div>改变工作目录</div><div><br></div><div>属性</div><div><br></div><div><span class="hljs-keyword">const</span> ADirName: <span class="hljs-keyword">string</span></div><div><br></div><div>远程服务器的目录描述</div><div><br></div><div>说明：该过程实际上是实现了FTP CWD命令。</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">ChangeDirUp</span>;</span></div><div><br></div><div>到上一级目录</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RetrieveCurrentDir</span>:</span> <span class="hljs-keyword">string</span>;</div><div><br></div><div>该函数返回当前目录名</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">List</span><span class="hljs-params">(ADest: TStrings; <span class="hljs-keyword">const</span> ASpecifier: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADetails: boolean)</span>;</span></div><div><br></div><div>列出当前目录所有文件和子目录及其属性</div><div><br></div><div>参数：</div><div><br></div><div>ADest: TStrings</div><div><br></div><div>保存文件及子目录的返回结果</div><div><br></div><div><span class="hljs-keyword">const</span> ASpecifier: <span class="hljs-keyword">string</span> =</div><div><br></div><div>文件掩码，用于列出符合条件的文件</div><div><br></div><div><span class="hljs-keyword">const</span> ADetails: boolean = true</div><div><br></div><div>包含文件和子目录属性</div><div><br></div><div><span class="hljs-keyword">property</span> DirectoryListing: TIdFTPListItems;</div><div><br></div><div>返回文件及目录结构的列表</div><div><br></div><div>示例代码：</div><div><br></div><div>&nbsp; &nbsp;LS := TStringList.Create;</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">try</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp;IdFTP1.ChangeDir(DirName);</div><div><br></div><div>&nbsp; &nbsp; &nbsp;IdFTP1.TransferType := ftASCII;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;CurrentDirEdit.Text := IdFTP1.RetrieveCurrentDir;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;DirectoryListBox.Items.Clear;</div><div><br></div><div>&nbsp; &nbsp; &nbsp;IdFTP1.List(LS);</div><div><br></div><div>&nbsp; &nbsp; &nbsp;DirectoryListBox.Items.Assign(LS);</div><div><br></div><div>&nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> DirectoryListBox.Items.Count &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> AnsiPos(total, DirectoryListBox.Items[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> DirectoryListBox.Items.Delete(<span class="hljs-number">0</span>);</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">finally</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp;LS.Free;</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>（<span class="hljs-number">5</span>）下载的实现</div><div><br></div><div>&nbsp; &nbsp; &nbsp;在下载之前，必须查看DirectoryListing.Items[sCurrFile].ItemType是否为文件，如返回为ditDirectory则代表当前文件名为目录，不能下载，必须导向到文件才可。如为文件，则可以进行下载。在下载前，设定传输的类型为二进制文件，并且指定本地要保存的路径。通过调用Get方法，实现文件的下载。下载过程较慢，可以考虑将其放到线程中实现。</div><div><br></div><div>过程说明：</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; ADest: TStream; AResume: Boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ACanOverwrite: boolean; AResume: Boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><br></div><div>从远程服务器上获取文件。</div><div><br></div><div>属性说明：</div><div><br></div><div><span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span></div><div><br></div><div>远程服务器上的源文件名</div><div><br></div><div><span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span></div><div><br></div><div>保存到客户机上的文件名</div><div><br></div><div><span class="hljs-keyword">const</span> ACanOverwrite: boolean = false</div><div><br></div><div>重写同名文件</div><div><br></div><div>AResume: Boolean = false</div><div><br></div><div>是否进行断点续传</div><div><br></div><div>示例代码：</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;SaveDialog1.FileName := <span class="hljs-keyword">Name</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> SaveDialog1.Execute <span class="hljs-keyword">then</span> <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SetFunctionButtons(false);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.TransferType := ftBinary;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;BytesToTransfer := IdFTP1.Size(<span class="hljs-keyword">Name</span>);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> FileExists(<span class="hljs-keyword">Name</span>) <span class="hljs-keyword">then</span> <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">case</span> MessageDlg(<span class="hljs-keyword">File</span> aready exists. <span class="hljs-keyword">Do</span> you want <span class="hljs-keyword">to</span> resume the download operation?,</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mtConfirmation, mbYesNoCancel, <span class="hljs-number">0</span>) <span class="hljs-keyword">of</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mrYes: <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;BytesToTransfer := BytesToTransfer - FileSizeByName(<span class="hljs-keyword">Name</span>);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.Get(<span class="hljs-keyword">Name</span>, SaveDialog1.FileName, false, true);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mrNo: <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.Get(<span class="hljs-keyword">Name</span>, SaveDialog1.FileName, true);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;mrCancel: <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">exit</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.Get(<span class="hljs-keyword">Name</span>, SaveDialog1.FileName, false);</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-keyword">end</span>;</div><div><br></div><div>（<span class="hljs-number">6</span>）上传的实现</div><div><br></div><div>&nbsp; &nbsp; &nbsp;上传的实现与下载类似，通过put方法即可。</div><div><br></div><div>过程说明：</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASource: TStream; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> AAppend: boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><br></div><div><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span>; <span class="hljs-keyword">const</span> AAppend: boolean)</span>;</span> <span class="hljs-keyword">overload</span>;</div><div><br></div><div>上传文件至服务器</div><div><br></div><div>属性说明：</div><div><br></div><div><span class="hljs-keyword">const</span> ASourceFile: <span class="hljs-keyword">string</span></div><div><br></div><div>将要被上传的文件</div><div><br></div><div><span class="hljs-keyword">const</span> ADestFile: <span class="hljs-keyword">string</span> =</div><div><br></div><div>服务器上的目标文件名</div><div><br></div><div><span class="hljs-keyword">const</span> AAppend: boolean = false</div><div><br></div><div>是否继续上传</div><div><br></div><div>代码示例：</div><div><br></div><div>&nbsp; &nbsp;<span class="hljs-keyword">if</span> IdFTP1.Connected <span class="hljs-keyword">then</span> <span class="hljs-keyword">begin</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp;<span class="hljs-keyword">if</span> UploadOpenDialog1.Execute <span class="hljs-keyword">then</span> <span class="hljs-keyword">try</span></div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.TransferType := ftBinary;</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;IdFTP1.Put(UploadOpenDialog1.FileName, ExtractFileName(UploadOpenDialog1.FileName));</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//可以在此添加改变目录的代码;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;finally</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp; &nbsp;//完成清除工作</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;end;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;end;</span></div><div><br></div><div><span class="hljs-comment">（7）删除的实现</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;删除文件使用Delete方法，该方法删除指定的文件，删除对象必须为文件。如果要删除目录则使用RemoveDir方法。</span></div><div><br></div><div><span class="hljs-comment">过程说明：</span></div><div><br></div><div><span class="hljs-comment">procedure Delete(const AFilename: string);</span></div><div><br></div><div><span class="hljs-comment">删除文件</span></div><div><br></div><div><span class="hljs-comment">procedure RemoveDir(const ADirName: string);</span></div><div><br></div><div><span class="hljs-comment">删除文件夹，根据不同的服务器删除文件夹有不同的要求。有些服务器不允许删除非空文件夹，程序员需要添加清空目录的代码。</span></div><div><br></div><div><span class="hljs-comment">上述两个过程的参数均为目标名称</span></div><div><br></div><div><span class="hljs-comment">代码示例：</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;if not IdFTP1.Connected then exit;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;Name := IdFTP1.DirectoryListing.Items[iCurrSelect].FileName;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;if IdFTP1.DirectoryListing.Items[iCurrSelect].ItemType = ditDirectory then try</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;idftp1.RemoveDir(Name);</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;finally</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;end</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;else</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;try</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;idftp1.Delete(Name);</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;finally</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;end;</span></div><div><br></div><div><span class="hljs-comment">（8）后退的实现</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;后退在实际上是目录操作的一种，可以简单的改变当前目录为..来实现，也可以通过回到上级目录来实现。</span></div><div><br></div><div><span class="hljs-comment">（9）取消的实现</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;在IdFtp的传输过程中，可以随时使用abort方法取消当前操作。可以的OnWork事件的实现中来确定何时取消操作。</span></div><div><br></div><div><span class="hljs-comment">代码示例：</span></div><div><br></div><div><span class="hljs-comment">//取消按钮的OnClick响应</span></div><div><br></div><div><span class="hljs-comment">procedure TMainForm.AbortButtonClick(Sender: TObject);</span></div><div><br></div><div><span class="hljs-comment">begin</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;AbortTransfer := true;</span></div><div><br></div><div><span class="hljs-comment">end;</span></div><div><br></div><div><span class="hljs-comment">//IdFTP的OnWork事件响应</span></div><div><br></div><div><span class="hljs-comment">procedure TMainForm.IdFTP1Work(Sender: TObject; AWorkMode: TWorkMode;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;const AWorkCount: Integer);</span></div><div><br></div><div><span class="hljs-comment">begin</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;...</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;if AbortTransfer then IdFTP1.Abort;</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp;AbortTransfer := false;</span></div><div><br></div><div><span class="hljs-comment">end;</span></div><div><br></div><div><span class="hljs-comment">（10）断点续传的实现</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;断点续传就是在上传或下载过程开始时，判断已经传输过的文件是否上传输完毕，如果传输没有成功完成，则在上次中断处继续进行传输工作。实现该功能需要两个重要的操作，首先是判断文件的大小信息，其次是在传输过程Get和Put中指定上传的行为。</span></div><div><br></div><div><span class="hljs-comment">&nbsp; &nbsp; &nbsp;判断服务器上文件的大小使用函数Size(FileName)。在下载过程中，比较本地文件和远程文件的信息，然后在Get中指定AResume := True即可。而上传也一样，指定Put的AAppend := True就可以了。 &nbsp;&nbsp;</span></div><div><br></div><div><span class="hljs-comment">在前面我们讲过，Indy的网络操作大部分是阻塞模式的，TIdFtp也不例外。这样在上述各个操作运行过程的时候用户界面被暂时冻结，必须要等待调用返回才能继续用户操作界面响应。所以在实际编程中，需要使用多线程的方式来保证户界面的响应。Windows系统可以使用CreateThread系统调用来创建线程，但是在使用的时候需要开发人员做很多额外的工作来保证线程的同步等问题。而Indy中也包含了实现多线程的控件TIdThreadComponent，相对比之下该控件实现多线程时更加方便，也更容易控制。我将在后续的文章里为大家介绍TIdThreadCOmponent的使用方法</span></div><span class="hljs-comment"> </span></code></pre></div>

</div>


</body></html>