<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Socket 粘包和分包问题 - 许佳佳的博客 - CSDN博客</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="article_content clearfix" id="article_content" style="overflow: hidden;">
                                                <div class="article-copyright">
                <span class="creativecommons">
                <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license">
                    </a>
            <span>
                版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。            </span>
               <div class="article-source-link2222">
                    本文链接：<a href="https://blog.csdn.net/Double2hao/article/details/83211334">https://blog.csdn.net/Double2hao/article/details/83211334</a>
                </div>
            </span>
                    </div>
                                                    <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css" rel="stylesheet">
                                        <div class="markdown_views prism-atom-one-dark" id="content_views">
                    <!-- flowchart 箭头图标 勿删 -->
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);" stroke-linecap="round" d="M 5 0 L 0 2.5 L 5 5 Z" />
                    </svg>
                                            <h1><a name="t0"></a><a id="_0"></a>概念</h1>
<p>Socket通信时会对发送的字节数据进行分包和粘包处理，属于一种Socket内部的优化机制。<br>
粘包：<br>
当发送的字节数据包比较小且频繁发送时，Socket内部会将字节数据进行粘包处理，既将频繁发送的小字节数据打包成  一个整包进行发送，降低内存的消耗。<br>
分包：<br>
当发送的字节数据包比较大时，Socket内部会将发送的字节数据进行分包处理，降低内存和性能的消耗。</p>
<h1><a name="t1"></a><a id="_6"></a>例子解释</h1>
<pre class="prettyprint"><code class="has-numbering">当前发送方发送了两个包，两个包的内容如下：
123456789
ABCDEFGH
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre>
<p>我们希望接收方的情况是：收到两个包，第一个包为：123456789，第二个包为：ABCDEFGH。但是在粘包和分包出现的情况就达不到预期情况。</p>
<h2><a name="t2"></a><a id="_14"></a>粘包情况</h2>
<p>两个包在很短的时间间隔内发送，比如在0.1秒内发送了这两个包，如果包长度足够的话，那么接收方只会接收到一个包，如下：</p>
<pre class="prettyprint"><code class="has-numbering">123456789ABCDEFGH
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<h2><a name="t3"></a><a id="_20"></a>分包情况</h2>
<p>假设包的长度最长设置为5字节（较极端的假设，一般长度设置为1000到1500之间），那么在没有粘包的情况下，接收方就会收到4个包,如下：</p>
<pre class="prettyprint"><code class="has-numbering">12345
6789
ABCDE
FGH
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li></ul></pre>
<h1><a name="t4"></a><a id="_29"></a>处理方式</h1>
<p>因为存在粘包和分包的情况，所以接收方需要对接收的数据进行一定的处理，主要解决的问题有两个：</p>
<ol>
<li>在粘包产生时，要可以在同一个包内获取出多个包的内容。</li>
<li>在分包产生时，要保留上一个包的部分内容，与下一个包的部分内容组合。</li>
</ol>
<p>目前处理方式主要两种：</p>
<h2><a name="t5"></a><a id="_36"></a>一、给数据包的头尾加上标记。</h2>
<p>比如在数据包的头部加上“START”字符串，尾部加上"END"字符串，这样可以解析出START和END之间的字符串就是接收方需要接收的内容。（当然真正处理的时候不可能使用START和END这种混效率较高的字符串，此处只是个例子）<br>
上边两个包的例子就可以如下：</p>
<pre class="prettyprint"><code class="has-numbering">START123456789END
STARTABCDEFGHEND
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>
<h2><a name="t6"></a><a id="_44"></a>二、在数据包头部加上内容的长度</h2>
<p>发送方在发送的时候就可以在包头加上包的长度，接收方每次接收的时候都根据头部的长度去获取后面的内容。<br>
上边两个包的例子就可以如下：</p>
<pre class="prettyprint"><code class="has-numbering">PACKAGELENGTH:0009123456789
PACKAGELENGTH:0008ABCDEFGH
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>
<h1><a name="t7"></a><a id="_51"></a>处理例子</h1>
<h2><a name="t8"></a><a id="_52"></a>头尾标记处理</h2>
<h3><a name="t9"></a><a id="_53"></a>粘包</h3>
<pre class="prettyprint"><code class="has-numbering">START123456789ENDSTARTABCDEFGHEND
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>获取第一个START和第一个END的位置，然后获取他们之间的内容，第二个包的内容就是获取第二个START和第二个END的位置。</p>
<h3><a name="t10"></a><a id="_58"></a>分包</h3>
<pre class="prettyprint"><code class="has-numbering">START1234567
89END
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>
<p>每个包要判断最后是否是END结尾，如果没有找到END，那么就保留上一个包START之后的内容，与下一个包第一个END之前的内容组合。</p>
<h2><a name="t11"></a><a id="_64"></a>头部长度处理</h2>
<h3><a name="t12"></a><a id="_65"></a>粘包</h3>
<pre class="prettyprint"><code class="has-numbering">PACKAGELENGTH:0009123456789PACKAGELENGTH:0008ABCDEFGH
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li></ul></pre>
<p>获取“PACKAGELENGTH:”这个字符串后面4个字符，转化为数字就是包的长度，根据包的长度获取后面的内容，第二个内容的长度就是获取第二个“PACKAGELENGTH:”字符串后面的4个字符。</p>
<h3><a name="t13"></a><a id="_70"></a>分包</h3>
<pre class="prettyprint"><code class="has-numbering">PACKAGELENGTH:0009123456
789
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>
<p>获取“PACKAGELENGTH:”这个字符串后面4个字符，转化为数字就是包的长度，如果包结尾还没有获取完，那么就要获取下一个包前面的部分内容。</p>
<h1><a name="t14"></a><a id="_77"></a>部分细节情况</h1>
<p>看了前面的例子，比较善于思考的读者肯定已经想到了一些其他问题，这些问题处理起来方式和上面相似，笔者在此罗列一下，就不重复解释了，相信聪明的读者能够自己解决：</p>
<h3><a name="t15"></a><a id="1_79"></a>1、粘包和分包问题一起出现</h3>
<pre class="prettyprint"><code class="has-numbering">START123456789ENDSTARTAB
CDEFGHEND
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>
<h3><a name="t16"></a><a id="2_84"></a>2、头尾标志由于分包获取不完整</h3>
<pre class="prettyprint"><code class="has-numbering">START123456789E
ND
</code><ul class="pre-numbering" style="opacity: 0.999915;"><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li></ul></pre>

                                    </div>
                <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-095d4a0b23.css" rel="stylesheet">
                    </div>


</div>


</body></html>