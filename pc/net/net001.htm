<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>socks5 协议简介 - 明风的博客 - CSDN博客</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="article_content clearfix" id="article_content" style="overflow: hidden;">
                                    <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css" rel="stylesheet">
                                        <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css" rel="stylesheet">
                <div class="htmledit_views" id="content_views">
                                            <h1><a name="t0"></a>socks5 协议简介</h1>

<p>&nbsp;Posted on&nbsp;2017-09-24&nbsp;|&nbsp;&nbsp;In&nbsp;<a href="http://zhihan.me/category/#/network" rel="nofollow" data-token="33a37a7c7636b463dad656b378ed49b7">network</a></p>

<p>或许你没听说过socks5，但你一定听说过ShadowSocks，ShadowSockS内部使用的正是socks5协议。</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-1.png" rel="nofollow" data-token="0906163e46c1c76b8df89dad3b394a4c"><img class="has" alt="image.png" src="images/net00101.png"></a></p>

<p>最近项目中涉及到socket5协议，趁此机会补一下这一块的空缺。</p>

<h2 id="什么是socks5"><a name="t1"></a>什么是socks5</h2>

<p>或许你没听说过socks5，但你一定听说过ShadowSocks，ShadowSockS内部使用的正是socks5协议。</p>

<p>socks是”SocketS”的缩写，因此socks5也叫sockets5。</p>

<p>RFC地址：</p>

<ul><li><a href="https://www.ietf.org/rfc/rfc1928.txt" rel="nofollow" data-token="73e23ce1468f7a38fd8343b488217ad1">rfc1928</a></li>
	<li><a href="https://www.ietf.org/rfc/rfc1929.txt" rel="nofollow" data-token="8f2aa202d95e50df2e4d9564720193c2">rfc1929</a></li>
</ul><p>socks是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。根据OSI七层模型来划分，SOCKS属于会话层协议，位于表示层与传输层之间。</p>

<p>当防火墙后的客户端要访问外部的服务器时，就跟socks代理服务器连接。该协议设计之初是为了让有权限的用户可以穿过过防火墙的限制，使得高权限用户可以访问外部资源。经过10余年的时间，大量的网络应用程序都支持socks5代理。</p>

<p>这个协议最初由David Koblas开发，而后由NEC的Ying-Da Lee将其扩展到版本4，最新协议是版本5，与前一版本相比，socks5做了以下增强：</p>

<ul><li>增加对UDP协议的支持；</li>
	<li>支持多种用户身份验证方式和通信加密方式；</li>
	<li>修改了socks服务器进行域名解析的方法，使其更加优雅；</li>
</ul><h2 id="socks5使用场景"><a name="t2"></a>socks5使用场景</h2>

<p>socks协议的设计初衷是在保证网络隔离的情况下，提高部分人员的网络访问权限，但是国内似乎很少有组织机构这样使用。一般情况下，大家都会使用更新的网络安全技术来达到相同的目的。</p>

<p>但是由于socksCap32和PSD这类软件，人们找到了socks协议新的用途：突破网络通信限制，这和该协议的设计初衷正好相反。</p>

<p>下面是两个典型的运用场景：</p>

<ul><li>美国某网游的服务器仅允许本国的IP进行连接。非美国玩家为了突破这种限制，可以找一个该地区的socks5代理服务器，然后用PSD接管网游客户端，通过socks5代理服务器连接游戏服务器。这样游戏服务器就会认为该玩家的客户端位于本地区，从而允许该玩家进行游戏（在天朝也叫科学**，属于正向代理）。</li>
</ul><p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-2.png" rel="nofollow" data-token="05a81bc2fe562e1fb4c9f76774994775"><img class="has" alt="image.png" src="images/net00102.png"></a></p>

<ul><li>
	<p>某服务器的防火墙仅允许部分端口（如http的80端口）通信，那么可以利用socks5协议和一个打开80端口监听的socks5服务器连接，从而可以连接公网上其他端口的服务器。利用一些额外的技术手段，甚至可以骗过内部的http代理服务器，这时在使用内网http代理上网的环境下也可以不受限制的使用网络服务，这称之为socks over HTTP（我们常说的穿墙）。</p>
	</li>
	<li>
	<p>内网穿透：在大学里，学校给我们提供了很多服务器资源，我们可以在内网使用。但放寒假回家后，无法进入学校内网，也就无法连接上内网的服务器资源。解决办法：在公网的VPS上搭一个socks代理，并将内网的一台web服务器和该VPS的socks端口打通，通过这台web服务器便可以访问所有内网服务器资源（常见的花生壳nat穿透和这个类似）。<a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-3.png" rel="nofollow" data-token="6c5756d4800911c53c00ce07fd8851d3"><img class="has" alt="image.png" src="images/net00103.png"></a></p>
	</li>
</ul><p>当然，使用代理服务器后，将不可避免的出现通信延迟，所以应该尽量选择同网络（通运营商）、距离近的服务器。</p>

<h2 id="与http代理的对比"><a name="t3"></a>与HTTP代理的对比</h2>

<p>socks支持多种用户身份验证方式和通信加密方式。</p>

<p>socks工作在比HTTP代理更低的网络层：socks使用握手协议来通知代理软件其客户端试图进行的连接socks，然后尽可能透明地进行操作，而常规代理可能会解释和重写报头（例如，使用另一种底层协议，例如FTP；然而，HTTP代理只是将HTTP请求转发到所需的HTTP服务器）。</p>

<p>socks5代理支持转发UDP报文，而HTTP属于tcp协议，不支持UDP报文的转发。</p>

<p>虽然HTTP代理有不同的使用模式，CONNECT方法允许转发TCP连接；然而，socks代理还可以转发UDP流量和反向代理，而HTTP代理不能。HTTP代理更适合HTTP协议，执行更高层次的过滤；socks不管应用层是什么协议，只要是传输层是TCP/UDP协议就可以代理。</p>

<h2 id="socks5协议详解"><a name="t4"></a>socks5协议详解</h2>

<h3 id="socks5认证协议"><a name="t5"></a>socks5认证协议</h3>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-4.png" rel="nofollow" data-token="6b84e4ea64b0867d2899835284ff5d45"><img class="has" alt="image.png" src="images/net00104.png"></a>在客户端、服务端协商好使用用户名密码认证后，客户端发出用户名密码，格式为：</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-5.png" rel="nofollow" data-token="1924520a3041cd1b42fb7dbeb6e0064b"><img class="has" alt="image.png" src="images/net00105.png"></a></p>

<ul><li>VER：鉴定协议版本</li>
	<li>ULEN：用户名长度</li>
	<li>UNAME：用户名</li>
	<li>PLEN：密码长度</li>
	<li>PASSWD：密码</li>
</ul><p>服务器鉴定后发出如下回应：</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-6.png" rel="nofollow" data-token="48f39dea97eff4881cd152ad08c7bab1"><img class="has" alt="image.png" src="images/net00106.png"></a></p>

<ul><li>VER：鉴定协议版本</li>
	<li>STATUS：鉴定状态</li>
</ul><p>其中鉴定状态 0x00 表示成功，0x01 表示失败。</p>

<h3 id="socks5传输协议"><a name="t6"></a>socks5传输协议</h3>

<p>创建与socks5服务器的TCP连接后，客户端需要先发送请求来协商版本及认证方式，格式为：<a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-7.png" rel="nofollow" data-token="c42814b8159bd714220a7ab65dbc8620"><img class="has" alt="image.png" src="images/net00107.png"></a></p>

<ul><li>VER：socks版本（在socks5中是0x05）；</li>
	<li>NMETHODS：在METHODS字段中出现的方法的数目；</li>
	<li>METHODS：客户端支持的认证方式列表，每个方法占1字节。</li>
</ul><p>服务器从客户端提供的方法中选择一个最优的方法并通过以下消息通知客户端（贪心算法：双方都支持、安全性最高）：</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-8.png" rel="nofollow" data-token="441dbacf6ebe2c077caf73ac6bdb16f5"><img class="has" alt="image.png" src="images/net00108.png"></a></p>

<ul><li>VER：socks版本（在socks5中是0x05）；</li>
	<li>METHOD：服务端选中的方法（若返回0xFF表示没有方法被选中，客户端需要关闭连接）；</li>
</ul><p>METHOD字段的值可以取如下值：</p>

<ul><li>X’00’ NO AUTHENTICATION REQUIRED</li>
	<li>X’01’ GSSAPI</li>
	<li>X’02’ USERNAME/PASSWORD</li>
	<li>X’03’ to X’7F’ IANA ASSIGNED</li>
	<li>X’80’ to X’FE’ RESERVED FOR PRIVATE METHODS</li>
	<li>X’FF’ NO ACCEPTABLE METHODS</li>
</ul><p>之后客户端和服务端根据选定的认证方式执行对应的认证。认证结束后客户端就可以发送请求信息（如果认证方法有特殊封装要求，请求必须按照方法所定义的方式进行封装）。</p>

<p>socks5请求格式：</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-9.png" rel="nofollow" data-token="5c5169ad6b4f1132b9b82a65b9eb24c1"><img class="has" alt="image.png" src="images/net00109.png"></a></p>

<ul><li>VER：socks版本（在socks5中是0x05）</li>
	<li>CMD：SOCK的命令码：
	<ul><li>CONNECT X’01’</li>
		<li>BIND X’02’</li>
		<li>UDP ASSOCIATE X’03’</li>
	</ul></li>
	<li>RSV：保留字段</li>
	<li>ATYP：地址类型：
	<ul><li>IP V4地址: X’01’</li>
		<li>域名地址: X’03’</li>
		<li>IP V6地址: X’04’</li>
	</ul></li>
	<li>
	<p>DST.ADDR：目的地址</p>
	</li>
	<li>DST.PORT：目的端口</li>
</ul><p>服务器按以下格式回应客户端的请求：</p>

<p><a href="http://zhihan.me/assets/images/posts/2017-09-24-socks5-protocol-10.png" rel="nofollow" data-token="9dcfa6f50bd761080bb6f4adf9c56453"><img class="has" alt="image.png" src="images/net00110.png"></a></p>

<ul><li>VER：socks版本（在socks5中是0x05）</li>
	<li>REP：应答状态码：
	<ul><li>X’00’ succeeded</li>
		<li>X’01’ general socks server failure</li>
		<li>X’02’ connection not allowed by ruleset</li>
		<li>X’03’ Network unreachable</li>
		<li>X’04’ Host unreachable</li>
		<li>X’05’ Connection refused</li>
		<li>X’06’ TTL expired</li>
		<li>X’07’ Command not supported</li>
		<li>X’08’ Address type not supported</li>
		<li>X’09’ to X’FF’ unassigned</li>
	</ul></li>
	<li>RSV：保留字段（需设置为X’00’）</li>
	<li>ATYP：地址类型：
	<ul><li>IP V4 address: X’01’</li>
		<li>DOMAINNAME: X’03’</li>
		<li>IP V6 address: X’04’</li>
	</ul></li>
	<li>BND.ADDR：服务器绑定的地址</li>
	<li>BND.PORT：服务器绑定的端口</li>
</ul><p>如果被选中的方法包括有认证信息的封装、完整性和/或机密性相关检查，则server端在发送响应包时也需要把这些响应消息封装进去。</p>

<h2 id="socks相关工具"><a name="t7"></a>SOCKS相关工具</h2>

<h3 id="socks服务器"><a name="t8"></a>SOCKS服务器</h3>

<p>部分SOCKS服务器软件：</p>

<ul><li>Dante Socks Server，<a href="http://www.inet.no/dante" rel="nofollow" data-token="26bb6c2ccaae5a3211fb3ae63034adb3">http://www.inet.no/dante</a></li>
	<li>Java Socks Server，<a href="http://jsocks.sourceforge.net/" rel="nofollow" data-token="1259cfb72be2ed867d4300cf78de5ec0">http://jsocks.sourceforge.net</a></li>
	<li>Socks4 Server，<a href="https://archive.is/20130502024508/" rel="nofollow" data-token="1b05b92f02d90b41b15777b258fd68fe">https://archive.is/20130502024508/</a></li>
	<li>SS5 Socks Server，<a href="http://ss5.sourceforge.net/" rel="nofollow" data-token="32f431e87dd3fc97f8dcd6800af077b5">http://ss5.sourceforge.net</a></li>
	<li>TcpToute2，<a href="https://github.com/GameXG/TcpRoute2" rel="nofollow" data-token="47ac219f1b0edeac3c96f99f61aac40b">https://github.com/GameXG/TcpRoute2</a></li>
</ul><h3 id="socks客户端"><a name="t9"></a>SOCKS客户端</h3>

<p>一般情况下应用程序会内嵌对SOCKS协议的支持。</p>

<div class="table-box"><table><thead><tr><th>客户端</th>
			<th>许可证</th>
			<th>版本</th>
			<th>发布日期</th>
			<th>平台</th>
			<th>支持协议</th>
		</tr></thead><tbody><tr><td>Dante client</td>
			<td><a href="https://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81" rel="nofollow" data-token="c677afc83164dcd5cf7b8661926fed05">BSD/CMU</a></td>
			<td>1.1.18</td>
			<td>09/2005</td>
			<td>Linux</td>
			<td>v4, v5</td>
		</tr><tr><td>FreeCap</td>
			<td><a href="https://zh.wikipedia.org/wiki/GPL" rel="nofollow" data-token="3619925ee6cf35e34a3fc6a35d2e61d2">GPL</a></td>
			<td>3.18</td>
			<td>02/2005</td>
			<td>Windows</td>
			<td>-</td>
		</tr><tr><td>Hummingbird socks</td>
			<td>-</td>
			<td>-</td>
			<td>-</td>
			<td>Windows</td>
			<td>-</td>
		</tr><tr><td>ProxyCap</td>
			<td>-</td>
			<td>2.03</td>
			<td>-</td>
			<td>Windows</td>
			<td>-</td>
		</tr><tr><td>SocksCap</td>
			<td>Non-Comercial home use</td>
			<td>-</td>
			<td>-</td>
			<td>-</td>
			<td>v5</td>
		</tr><tr><td>Super Socks5Cap</td>
			<td>-</td>
			<td>1.5.3</td>
			<td>-</td>
			<td>Windows</td>
			<td>-</td>
		</tr><tr><td>tsocks</td>
			<td>GPL</td>
			<td>1.8</td>
			<td>10/2002</td>
			<td>-</td>
			<td>-</td>
		</tr><tr><td>nylon</td>
			<td>-</td>
			<td>-</td>
			<td>06/2003</td>
			<td><a href="https://zh.wikipedia.org/wiki/OpenBSD" rel="nofollow" data-token="453478f94964fcbbcfb9ca1607a77168">OpenBSD</a></td>
			<td>-</td>
		</tr></tbody></table></div><h2 id="python实现socks5代理"><a name="t10"></a>python实现socks5代理</h2>

<p>为了方便，我们直接使用python中的<code>SocketServer</code>库，直接运行以下程序即可在本机建立了一个socks5的代理服务器：</p>

<pre class="has" name="code"><code class="hljs python"><ol class="hljs-ln" style="width: 713px;"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> socket, sys, select, SocketServer, struct, time</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadingTCPServer</span><span class="hljs-params">(SocketServer.ThreadingMixIn, SocketServer.TCPServer)</span>:</span> <span class="hljs-keyword">pass</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_tcp</span><span class="hljs-params">(sock, remote)</span>:</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    fdset = [sock, remote]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        r, w, e = select.select(fdset, [], [])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> sock <span class="hljs-keyword">in</span> r:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> remote.send(sock.recv(<span class="hljs-number">4096</span>)) &lt;= <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span> remote <span class="hljs-keyword">in</span> r:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> sock.send(remote.recv(<span class="hljs-number">4096</span>)) &lt;= <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Socks5Server</span><span class="hljs-params">(SocketServer.StreamRequestHandler)</span>:</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle</span><span class="hljs-params">(self)</span>:</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">try</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            print(<span class="hljs-string">'socks connection from '</span>, self.client_address)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            sock = self.connection</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment"># 1. Version</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            sock.recv(<span class="hljs-number">262</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            sock.send(<span class="hljs-string">b"\x05\x00"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment"># 2. Request</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            data = self.rfile.read(<span class="hljs-number">4</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            mode = ord(data[<span class="hljs-number">1</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            addrtype = ord(data[<span class="hljs-number">3</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> addrtype == <span class="hljs-number">1</span>:  <span class="hljs-comment"># IPv4</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                addr = socket.inet_ntoa(self.rfile.read(<span class="hljs-number">4</span>))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">elif</span> addrtype == <span class="hljs-number">3</span>:  <span class="hljs-comment"># Domain name</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                addr = self.rfile.read(ord(sock.recv(<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            port = struct.unpack(<span class="hljs-string">'&gt;H'</span>, self.rfile.read(<span class="hljs-number">2</span>))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            reply = <span class="hljs-string">b"\x05\x00\x00\x01"</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">try</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span> mode == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 1. Tcp connect</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    remote.connect((addr, port[<span class="hljs-number">0</span>]))</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    print(<span class="hljs-string">'Tcp connect to'</span>, addr, port[<span class="hljs-number">0</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="41"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">else</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="42"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    reply = <span class="hljs-string">b"\x05\x07\x00\x01"</span>  <span class="hljs-comment"># Command not supported</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="43"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                local = remote.getsockname()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="44"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                reply += socket.inet_aton(local[<span class="hljs-number">0</span>]) + struct.pack(<span class="hljs-string">"&gt;H"</span>, local[<span class="hljs-number">1</span>])</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="45"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">except</span> socket.error:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="46"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-comment"># Connection refused</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="47"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                reply = <span class="hljs-string">'\x05\x05\x00\x01\x00\x00\x00\x00\x00\x00'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="48"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            sock.send(reply)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="49"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-comment"># 3. Transfering</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="50"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            <span class="hljs-keyword">if</span> reply[<span class="hljs-number">1</span>] == <span class="hljs-string">'\x00'</span>:  <span class="hljs-comment"># Success</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="51"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                <span class="hljs-keyword">if</span> mode == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 1. Tcp connect</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="52"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">                    handle_tcp(sock, remote)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="53"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">except</span> socket.error:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="54"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            print(<span class="hljs-string">'socket error'</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="55"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="56"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="57"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="58"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    server = ThreadingTCPServer((<span class="hljs-string">''</span>, <span class="hljs-number">1080</span>), Socks5Server)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="59"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    server.serve_forever()</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="60"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="61"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="62"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="63"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    main()</div></div></li></ol></code></pre>

<p>客户端实现代码：</p>

<pre class="has" name="code"><code class="hljs python"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">import</span> socket, socks, requests</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    socks.set_default_proxy(socks.SOCKS5, <span class="hljs-string">"127.0.0.1"</span>, <span class="hljs-number">1080</span>)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    socket.socket = socks.socksocket</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    print(requests.get(<span class="hljs-string">'http://127.0.0.1:1080'</span>).text)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    main()</div></div></li></ol></code></pre>

<h2 id="参考文献"><a name="t11"></a>参考文献</h2>

<ul><li><a href="https://www.ietf.org/rfc/rfc1929.txt" rel="nofollow" data-token="8f2aa202d95e50df2e4d9564720193c2">rfc1929</a>,&nbsp;<a href="https://www.ietf.org/rfc/rfc1928.txt" rel="nofollow" data-token="73e23ce1468f7a38fd8343b488217ad1">rfc1928</a></li>
	<li><a href="http://www.cnblogs.com/yinzhengjie/p/7357860.html" rel="nofollow" data-token="acaa93be089f459b449b473fc3610025">HTTP协议和SOCKS5协议</a></li>
	<li><a href="http://blog.csdn.net/cuiyifang/article/details/8784394" rel="nofollow" data-token="53b1f982ed094860fad9dc8de4483177">socket4和socket5的区别</a></li>
	<li><a href="http://www.mojidong.com/network/2015/03/07/socket5-1/" rel="nofollow" data-token="8b788391a3318fc81ab61114b6d1acf1">socket5 协议学习与实现(一)</a></li>
	<li><a href="https://wrfly.kfd.me/SOCKS%E4%BB%A3%E7%90%86%E5%92%8CHTTP%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB/" rel="nofollow" data-token="612b1643f442d5fdc2c81b80d2866ce5">Socks代理和http代理的区别</a></li>
</ul><p>转载： <a href="http://zhihan.me/network/2017/09/24/socks5-protocol/" rel="nofollow" data-token="14354d1fcd755e8ea5dd611efb4f3f4f">http://zhihan.me/network/2017/09/24/socks5-protocol/</a></p>                                    </div>
                    </div>


</div>


</body></html>