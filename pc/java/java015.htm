<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Java字符串String类操作方法整理 - sjq__python_web的博客 - CSDN博客</title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="article_content clearfix" id="article_content" style="overflow: hidden;">
                                                <div class="article-copyright">
                <span class="creativecommons">
                <a href="http://creativecommons.org/licenses/by-sa/4.0/" rel="license">
                    </a>
            <span>
                版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener"> CC 4.0 BY-SA </a>版权协议，转载请附上原文出处链接和本声明。            </span>
               <div class="article-source-link2222">
                    本文链接：<a href="https://blog.csdn.net/sjq__python_web/article/details/80099454">https://blog.csdn.net/sjq__python_web/article/details/80099454</a>
                </div>
            </span>
                    </div>
                                                    <!--一个博主专栏付费入口-->
             
             <!--一个博主专栏付费入口结束-->
            <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-d284373521.css" rel="stylesheet">
                                        <link href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-d284373521.css" rel="stylesheet">
                <div class="htmledit_views" id="content_views">
                                            <p>&nbsp; &nbsp; 最近利用晚上的一些空闲时间学习了Java的字符串部分，发现其与C语言、C++等面向过程语言在使用上出现的不同点，C语言仅仅提供了字符串类型的一个构造，相当于只给了开发者基本材料，让开发者自行去用材料造轮子;而Java给字符串提供了许多的可用方法，调用这些方法可以在一定程度上加快程序的开发效率，这也就相当于Java已经给开发人员提供好了轮子，只要用轮子去造车子便可，所以这就是面向对象思想与面向过程思想的其中一个区别吧。所以我喜欢Java的原因大概是Java可以随时随地new一个对象吧。。。<img alt="" src="images/java01501.jpg"></p><p>&nbsp; &nbsp; 但是也正因为这一特点，让初学者头秃的是在短时间内没有办法熟练掌握和应用这些方法，那我也觉得编程之路上没有捷径，所有的技术大神除了天赋与兴趣，那每天的事情就是敲代码敲代码敲代码。所以在学完String类的简单操作方法后，我打算在博客上先将这些方法进行分类和整理，暂时需要做的是理清这些方法应用于哪些情况，又该如何去调用这些方法，之后就每天对着这些方法慢慢敲慢慢敲敲到熟练为止，至于那些运用在项目中的复杂的骚操作，那就留给时间和头发吧。<br></p><p>&nbsp; &nbsp; 然后。。。就不给自己灌鸡汤了，正事儿要紧！！<br></p><p>&nbsp; &nbsp; 关于String类的基本操作，可分为以下几类：1、基本操作方法&nbsp; 2、字符串比较&nbsp; 3、字符串与其他数据类型之间的转换&nbsp; 4、字符与字符串的查找&nbsp; 5、字符串的截取与拆分&nbsp; 6、字符串的替换与修改<br></p><p>&nbsp; &nbsp; 我觉得在整理到下面的内容之前需要给自己提的醒是关于字符串的操作方法我们是不需要像其他操作一样手动导包的，其String和StringBuffer等类封装在java.lang包中，我们直接调用字符串方法即可！<br></p><p>&nbsp; &nbsp; <span style="color: rgb(255, 0, 0); font-size: 18px;">一、String基本操作方法</span><br></p><p>&nbsp; &nbsp; 首先说一下基本操作方法，字符串的基本操作方法中包含以下几种：(1)获取字符串长度length()&nbsp; (2)获取字符串中的第i个字符charAt(i)&nbsp; (3)获取指定位置的字符方法getChars(4个参数)</p><p>&nbsp; &nbsp; 1、&nbsp;获取字符串长度方法<span style="color: rgb(0, 153, 0);">length()</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">格式：int length = str.length();</span><br></p><p>&nbsp; &nbsp; 2、获取字符串中的第i个字符方法<span style="color: rgb(0, 153, 0);">charAt(i)</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">格式：char ch = str.charAt(i);&nbsp;</span> <span style="color: rgb(102, 204, 204);">//i为字符串的索引号，可得到字符串任意位置处的字符，保存到字符变量中</span><br></p><p>&nbsp; &nbsp; 3、获取指定位置的字符方法<span style="color: rgb(0, 102, 0);">getChars(4个参数)</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">格式：char array[] = new char[80];</span>&nbsp; <span style="color: rgb(102, 204, 204);">//先要创建以一个容量足够大的char型数组，数组名为array</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">str.getChars(indexBegin,indexEnd,array,arrayBegin);</span><br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 解释一下括号中四个参数的指向意义：1、<span style="color: rgb(102, 204, 204);">indexBegin</span>：需要复制的字符串的开始索引<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2、&nbsp;<span style="color: rgb(102, 204, 204);">indexEnd</span>:&nbsp; &nbsp; 需要复制的字符串的结束索引，indexEnd-1<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3、<span style="color: rgb(102, 204, 204);">array</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;前面定义的char型数组的数组名<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4、<span style="color: rgb(102, 204, 204);">arrayBegin</span>:数组array开始存储的位置索引号<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这样我们就可以将字符串中想要的范围内的字符都复制到字符数组中，将字符数组打印输出即可。<br></p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 与getChars()类似的方法有一个getBytes(),两者使用上基本相同，只是getBytes()方法创建的是byte类型的数组，而byte编码是默认字符集编码，它是用编码表示的字符。</p><p>下面就上代码简单演示一下三种方法的用法：</p><pre><code class="language-java hljs"><ol class="hljs-ln" style="width: 797px;"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">//String类基本操作方法</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringBasicOpeMethod</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str = <span class="hljs-string">"如何才能变得像棋哥一样优秀？算了吧，憋吹牛逼！"</span>; <span class="hljs-comment">//定义一个字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(str);  <span class="hljs-comment">//输出字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、length()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> length = str.length();<span class="hljs-comment">//得到字符串长度</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"字符串的长度为："</span>+length);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***2、charAt()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">char</span> ch = str.charAt(<span class="hljs-number">7</span>);  <span class="hljs-comment">//得到索引为7的字符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"字符串中的第8个字符为："</span>+ch);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***3、getChars()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">char</span> chardst[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">80</span>]; <span class="hljs-comment">//定义容量为80的字符数组，用于存储从字符串中提取出的一串字符</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        str.getChars(<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,chardst,<span class="hljs-number">0</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//System.out.println("字符数组中存放的内容为："+chardst);//错误，输出的是编码</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(chardst); <span class="hljs-comment">//**括号中不可带其他字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>&nbsp;运行结果如下：</p><p>&nbsp; &nbsp;&nbsp;<img alt="" src="images/java01502.jpg"></p><p><span style="font-size: 18px;">&nbsp;<span style="color: rgb(255, 0, 0);"> 二、字符串比较</span>&nbsp;</span></p><p>&nbsp; &nbsp;我们知道，明确的数值之间可以很方便地进行比较，那么字符串该如何进行比较呢？字符串的比较是将两个字符串从左到右逐个字符逐个字符进行比较，比较的依据是当前字符的Uncode编码值，直到比较出两个不同字符的大小。</p><p>&nbsp; &nbsp; 字符串比较也分为两大类：一类是字符串大小的比较，这样的比较有三种结果，大于、等于以及小于；还有一类比较方法就是比较两个字符串是否相等，这样产生的比较结果无非就两种，ture和false。</p><p>&nbsp; &nbsp; 1、首先看一下第一种比较大小这类需求中的方法：</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(1)不忽<span style="font-size: 14px;">略字</span>符串大小写情况下字符串的大小比较方法<span style="color: rgb(0, 153, 0);">compareTo(another str)</span><br></p><p><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><span style="color: rgb(255, 0, 0);">格式：int result = str1.compareTo(str2);</span><br></p><p><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;输出三种比较结果：若该字符串的Unicode值&lt;参数字符串的Unicode值，结果返回一负整数；若<span style="color: rgb(0, 51, 0);">若该字符串的Unicode值=参数字符串的Unicode值，结果返回0；<span style="color: rgb(0, 51, 0);">若该字符串的Unicode值&gt;参数字符串的Unicode值，结果返回一正整数。</span></span><br></span></p><p><span style="color: rgb(0, 51, 0);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;(2)&nbsp; 忽略字符串大小写情况下字符串的大小比较方法</span><span style="color: rgb(0, 153, 0);">c</span><span style="color: rgb(0, 153, 0);">ompareTOIgnoreCase(another str)</span><br></p><p><span style="color: rgb(0, 51, 0);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="color: rgb(255, 0, 0);">格式：int result = str1.compareToIgnoreCase(str2);</span><br></p><p><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 在忽略字符串大小写情况下，返回三种比较结果：<span style="color: rgb(0, 51, 0);">输出三种比较结果：若该字符串的Unicode值&lt;参数字符串的Unicode值，结果返回一负整数；若</span><span style="color: rgb(0, 51, 0);">若该字符串的Unicode值=参数字符串的Unicode值，结果返回0；若该字符串的Unicode值&gt;参数字符串的Unicode值，结果返回一正整数。</span><br></span></span></span></p><p><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);">&nbsp; &nbsp; 2、然后看一下第二种判别两种字符串是否相等(相等情况下必须保证二者长度相等)需求中的方法：<br></span></span></span></span></p><p><span style="color: rgb(0, 51, 0);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (1)不忽略字符串大小写情况下判别字符串相等的方法</span><span style="color: rgb(0, 153, 0);">eaquals(another str)</span><br></p><p><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(255, 0, 0);">格式：boolean result = str1.equals(str2);</span><br></p><p><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);"><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当且仅当str1和str2的长度相等，且对应位置字符的Unicode编码完全相等，返回true,否则返回false</span></span></span></span></p><p><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp; (2)&nbsp; &nbsp;忽略字符串大小写情况下判别字符串相等的方法</span><span style="color: rgb(0, 153, 0);">equalsIgnoreCase(another str)</span><br></p><p><span style="color: rgb(0, 51, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="color: rgb(255, 0, 0);">格式：boolean result = str1.equals(str2);</span></p><p><span style="color: rgb(51, 51, 51);">&nbsp; demo如下：</span></p><pre><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringCompareMethod</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str1 = <span class="hljs-string">"elapant"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str2 = <span class="hljs-string">"ELEPANT"</span>;  <span class="hljs-comment">//定义两个字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str3 = <span class="hljs-string">"Apple"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str4 = <span class="hljs-string">"apple"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、compareTo方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//不忽略字符串字符大小写</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span>(str1.compareTo(str2)&gt;<span class="hljs-number">0</span>){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"&gt;"</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str1.compareTo(str2) == <span class="hljs-number">0</span>){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"="</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"="</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***2、compareToIgnoreCase()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//忽略字符串字符大小写</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span>(str1.compareToIgnoreCase(str2)&gt;<span class="hljs-number">0</span>){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"&gt;"</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str1.compareToIgnoreCase(str2) == <span class="hljs-number">0</span>){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"="</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str1+<span class="hljs-string">"&lt;"</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***3、equals()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//不忽略字符串字符大小写</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span>(str3.equals(str4)){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str3+<span class="hljs-string">"="</span>+str4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str3+<span class="hljs-string">"!="</span>+str4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="31"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="32"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***4、equalsIgnoreCase()方法***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="33"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//忽略字符串字符大小写</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="34"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">if</span>(str3.equalsIgnoreCase(str4)){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="35"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str3+<span class="hljs-string">"="</span>+str4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="36"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }<span class="hljs-keyword">else</span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="37"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.println(str3+<span class="hljs-string">"!="</span>+str4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="38"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="39"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="40"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>运行结果如下：</p><p><img alt="" src="images/java01503.jpg"><br></p><p>&nbsp;<span style="color: rgb(255, 0, 0);"><span style="font-size: 18px;">三、字符串与其他数据类型的转换</span></span></p><p><span style="color: rgb(51, 51, 51); font-size: 18px;">&nbsp; </span><span style="color: rgb(51, 51, 51);"><span style="font-size: 16px;">有时候我们需要在字符串与其他数据类型之间做一个转换，例如将字符串数据变为整形数据，或者反过来将整形数据变为字符串类型数据，"20"是字符串，20就是整形数。我们都知道整形和浮点型之间可以利用强制类型转换和自动类型转换两种机制实现两者之间的转换，那么"20"和20这两种属于不同类型的数据就需要用到String类提供的数据类型转换方法了。</span></span></p><p><span style="color: rgb(51, 51, 51);"><span style="font-size: 16px;">&nbsp; &nbsp;由于数据类型较多，因而转换使用的方法也比较多，在此我就用一个表格罗列一下：<br></span></span></p><p><span style="color: rgb(51, 51, 51);"><span style="font-size: 16px;"></span></span></p><div class="table-box"><table width="200" border="1" cellspacing="1" cellpadding="1"><tbody><tr><td>&nbsp; &nbsp; 数据类型</td><td style="text-align: center;">字符串转换为其他数据类型的方法</td><td style="text-align: center;">其它数据类型转换为字符串的方法1</td><td style="text-align: center;">其他数据类型转换为字符串的方法2</td></tr><tr><td>&nbsp; &nbsp; boolean</td><td style="text-align: center;">Boolean.getBoolean(str)</td><td style="text-align: center;">String.valueOf([boolean] b)</td><td style="text-align: center;">Boolean.toString([boolean] b)</td></tr><tr><td>&nbsp; &nbsp; &nbsp; &nbsp; int</td><td style="text-align: center;">Integer.parseInt(str)</td><td style="text-align: center;">String.valueOf([int] i)</td><td style="text-align: center;">Int.toString([int] i)</td></tr><tr><td style="text-align: center;">long</td><td style="text-align: center;">Long.parseLong(str)</td><td style="text-align: center;">String.valueOf([long] l)</td><td style="text-align: center;">Long.toString([long] l)</td></tr><tr><td style="text-align: center;">float</td><td style="text-align: center;">Float.parseFloat(str)</td><td style="text-align: center;">String.valueOf([float] f)</td><td style="text-align: center;">Float.toString([float] f)</td></tr><tr><td style="text-align: center;">double&nbsp;</td><td style="text-align: center;">double.parseFloat(str)</td><td style="text-align: center;">String.valueOf([double] d)</td><td style="text-align: center;">Double.toString([double] d)</td></tr><tr><td style="text-align: center;">byte</td><td style="text-align: center;">Byte.parseByte(str)</td><td style="text-align: center;">String.valueOf([byte] bt)</td><td style="text-align: center;">Byte.toString([byte] bt)</td></tr><tr><td style="text-align: center;">char</td><td style="text-align: center;">str.charAt(i)</td><td style="text-align: center;">String.valueOf([char] c)</td><td style="text-align: center;">Character.toString([char] c)</td></tr></tbody></table></div><p>简单测试的小demo如下：</p><pre><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringConvert</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***将字符串类型转换为其他数据类型***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">boolean</span> bool = Boolean.getBoolean(<span class="hljs-string">"false"</span>); <span class="hljs-comment">//字符串类型转换为布尔类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> integer = Integer.parseInt(<span class="hljs-string">"20"</span>);    <span class="hljs-comment">//字符串类型转换为整形</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">long</span> LongInt = Long.parseLong(<span class="hljs-string">"1024"</span>);   <span class="hljs-comment">//字符串类型转换为长整形</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">float</span> f = Float.parseFloat(<span class="hljs-string">"1.521"</span>);     <span class="hljs-comment">//字符串类型转换为单精度浮点型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">double</span> d = Double.parseDouble(<span class="hljs-string">"1.52123"</span>);<span class="hljs-comment">//字符串类型转换为双精度浮点型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">byte</span> bt = Byte.parseByte(<span class="hljs-string">"200"</span>);         <span class="hljs-comment">//字符串类型转换为byte型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">char</span> ch = <span class="hljs-string">"棋哥"</span>.charAt(<span class="hljs-number">0</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***将其他数据类型转换为字符串类型方法1***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strb1 = String.valueOf(bool);    <span class="hljs-comment">//将布尔类型转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String stri1 = String.valueOf(integer); <span class="hljs-comment">//将整形转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strl1 = String.valueOf(LongInt); <span class="hljs-comment">//将长整型转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strf1 = String.valueOf(f);       <span class="hljs-comment">//将单精度浮点型转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strd1 = String.valueOf(d);       <span class="hljs-comment">//将double类型转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strbt1 = String.valueOf(bt);     <span class="hljs-comment">//将byte转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String strch1 = String.valueOf(ch);     <span class="hljs-comment">//将字符型转换为字符串类型</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>&nbsp;整理完三个方法我觉得需要来个中场休息，比如。。。放张图片舒服一下。。。</p><p>&nbsp;<img alt="" src="images/java01504.jpg"><span style="font-size: 18px;">程序员牛逼！！！</span></p><p>&nbsp;然后继续整理后面的三个方法。。。</p><p>&nbsp;四、字符串查找</p><p>&nbsp;我们有时候需要在一段很长的字符串中查找我们需要的其中一部分字符串或者某个字符，String类恰恰提供了相应的查找方法，这些方法返回的都是目标查找对象在字符串中的索引值，所以都是整形值。具体分类情况如下：</p><p>&nbsp;字符串查找无非分为两类：查找字符串和查找单个字符，而查找又可分为查找对象在字符串中第一次出现的位置和最后一次出现的位置，再扩展一步，我们可以缩小查找范围，在指定范围之内查找其第一次或最后一次出现的位置。</p><p>&nbsp; （1）查找字符出现的位置<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">1、indexOf()方法</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式：<span style="color: rgb(255, 0, 0);">1、str.indexOf(ch);</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">2、str.indexOf(ch,fromIndex); //包含fromIndex位置</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式1返回指定字符在字符串中第一次出现位置的索引&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;格式2返回指定索引位置之后第一次出现该字符的索引号</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">2、lastIndexOf()方法</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式：<span style="color: rgb(255, 0, 0);">1、str.lastIndexOf(ch);</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">2、str.lastIndexOf(ch,fromIndex);</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式1返回指定字符在字符串中最后一次出现位置的索引<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式2返回指定索引位置之前最后一次出现该字符的索引号<br></p><p>&nbsp; &nbsp;(2)&nbsp; &nbsp;查找字符串出现的位置</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 153, 0);">1、indexOf()方法&nbsp;&nbsp;</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;格式：<span style="color: rgb(255, 0, 0);">1、str.indexOf(str);</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(255, 0, 0);">&nbsp;2、str.indexOf(str,fromIndex);</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;格式1返回指定子字符串在字符串中第一次出现位置的索引<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;格式2返回指定索引位置之前第一次出现该子字符串的索引号<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">2、lastIndexOf()方法</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式：<span style="color: rgb(255, 0, 0);">1、str.lastIndexOf(str);</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: rgb(255, 0, 0);">2、str.lastIndexOf(str,fromIndex);&nbsp;</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式1返回指定子字符串在字符串中最后一次出现位置的索引<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 格式2返回指定索引位置之前最后一次出现该子字符串的索引号<br></p><p>看代码：</p><pre><code class="language-java hljs"><ol class="hljs-ln" style="width: 738px;"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">//字符与字符串查找</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringSearchChar</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str = <span class="hljs-string">"How qi bocome handsome like qi ge"</span>; <span class="hljs-comment">//定义一个长字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"该字符串为："</span>+str);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、indexOf()方法查找字符首个出现位置格式1,2***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index1 = str.indexOf(<span class="hljs-string">" "</span>);  <span class="hljs-comment">//找到第一个空格所在的索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index2 = str.indexOf(<span class="hljs-string">" "</span>,<span class="hljs-number">4</span>); <span class="hljs-comment">//找到索引4以后的第一个空格所在索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"第一个空格所在索引为："</span>+index1);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"索引4以后的第一个空格所在索引为："</span>+index2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"*****************"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***2、lastIndexOf()方法查找字符最后出现位置格式1,2***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index3 = str.lastIndexOf(<span class="hljs-string">" "</span>);  <span class="hljs-comment">//找到最后一个空格所在的索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index4 = str.lastIndexOf(<span class="hljs-string">" "</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//找到索引10以后的第一个空格所在索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"最后一个空格所在索引为："</span>+index3);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"索引10以前最后一个空格所在索引为："</span>+index4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"*****************"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***3、indexOf()方法查找子字符串第一次出现位置格式1,2***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index5 = str.indexOf(<span class="hljs-string">"qi"</span>); <span class="hljs-comment">//找到"qi"子字符串第一次出现位置的索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index6 = str.indexOf(<span class="hljs-string">"qi"</span>,<span class="hljs-number">5</span>);<span class="hljs-comment">//找到索引5以后子字符串"qi"第一个出现位置所在索引</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"子字符串qi第一次出现位置的索引号为："</span>+index5);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"索引5以后子字符串qi第一次出现位置的索引号为："</span>+index6);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"*****************"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***4、lastIndexOf()方法查找子字符串最后一次出现位置格式1,2***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index7 = str.lastIndexOf(<span class="hljs-string">"qi"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> index8 = str.lastIndexOf(<span class="hljs-string">"qi"</span>,<span class="hljs-number">5</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"子字符串qi最后一次出现位置的索引号为："</span>+index7);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="28"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"索引号5以后子字符串qi最后一次出现位置的索引号为："</span>+index8);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="29"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="30"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>结果截图如下：</p><p><img alt="" src="images/java01505.jpg"></p><p>&nbsp;<span style="color: rgb(255, 0, 0); font-size: 18px;">五、截取与拆分</span></p><p>&nbsp;这类方法是截取出一个长字符串中的一个子字符串或将字符串按照正则表达式的要求全部拆分保存到一个字符串数组中。具体方法如下所示：</p><p>&nbsp;(1) 截取方法</p><p>&nbsp; &nbsp; &nbsp; <span style="color: rgb(0, 153, 0);">1、substring()方法</span><span style="color: rgb(255, 0, 0);">&nbsp;</span> &nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; <span style="color: rgb(255, 0, 0);">格式1：String result = str.substring(index)；</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <span style="color: rgb(255, 0, 0);">格式2：String result = str.substring(beginIndex,EndIndex)；//实际索引号[beginIndex,EndIndex-1]</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp; &nbsp;结果：截取出范围内的字符串</p><p>（2）拆分方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">1、split()方法</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <span style="color: rgb(255, 0, 0);">格式1 ：String strArray[] = str.split(正则表达式);// 拆分的结果保存到字符串数组中</span><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; <span style="color: rgb(255, 0, 0);">格式2：String strArray[] = str.split(正则表达式，limit);</span><br></p><p>代码示例如下：</p><pre><code class="language-java hljs"><ol class="hljs-ln" style="width: 767px;"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">//字符串截取与拆分</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringCutAndSplit</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str = <span class="hljs-string">"How to cut and split strings"</span>; <span class="hljs-comment">//定义字符串</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"字符串为："</span>+str);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> length = str.length(); <span class="hljs-comment">//获取字符串长度，保存到变量中</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"字符串长度为："</span>+length);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、substring()方法截取出第一个单词和最后一个单词***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//首先配合indexOf()和lastIndexOf()方法找到第一个单词和最后一个单词前后空格的索引号</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//第一个单词的左范围索引为0，最后一个单词的右范围索引为length-1</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> firstIndex = str.indexOf(<span class="hljs-string">' '</span>); <span class="hljs-comment">//找到第一个空格所在位置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">int</span> lastIndex = str.lastIndexOf(<span class="hljs-string">' '</span>); <span class="hljs-comment">//找到最后一个空格所在位置</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"第一个空格的索引号为："</span>+firstIndex);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"最后一个空格的索引号为："</span>+lastIndex);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">//利用substring()方法根据第一个和最后一个单词的索引范围截取出第一个和最后一个单词</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String firstWord = str.substring(<span class="hljs-number">0</span>,firstIndex); <span class="hljs-comment">//截取出第一个单词</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String lastWord = str.substring(lastIndex+<span class="hljs-number">1</span>,length);<span class="hljs-comment">//截取出最后一个单词</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"第一个单词为："</span>+firstWord);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"最后一个单词为："</span>+lastWord);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、split()方法拆分出所有单词***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String stringArray[] = str.split(<span class="hljs-string">" "</span>);  <span class="hljs-comment">//根据空格要求拆分出所有单词保存到字符串数组中</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"拆分之后的各个词汇为："</span>); <span class="hljs-comment">//输出提示信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;stringArray.length;i++){</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">            System.out.print(stringArray[i]+<span class="hljs-string">"\t"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="27"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>代码执行结果如下：</p><p><img alt="" src="images/java01506.jpg"><br></p><p><span style="color: rgb(255, 0, 0); font-size: 18px;">六、替换或修改</span></p><p>终于到最后一类方法了，开心！！有时候我们需要对原字符串中的某些子字符串进行替换或修改，此时也需要String类提供的一些简单快捷好用的方法啦</p><p><span style="color: rgb(0, 153, 0);">（1）concat()方法合并字符串</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;<span style="color: rgb(255, 0, 0);">格式：String result = str1.concat(str2);&nbsp; &nbsp;//将str1和str2合并</span></p><p>&nbsp; <span style="color: rgb(0, 153, 0);">(2)&nbsp; toLowerCase()方法 将字符全部转化为小写</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(255, 0, 0);">&nbsp;格式:&nbsp; String result = str.toLowerCase();</span></p><p>&nbsp;<span style="color: rgb(0, 153, 0);"> (3)&nbsp; toUpperCase()方法 将字符全部转化为大写</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;<span style="color: rgb(255, 0, 0);">格式：String result = str.toUpperCase();&nbsp; &nbsp;</span> &nbsp; &nbsp; &nbsp;&nbsp;</p><p>&nbsp;<span style="color: rgb(0, 153, 0);"> (4)replaceAll()、replaceFirst()方法：需要匹配正则表达式&nbsp; &nbsp;</span> &nbsp; &nbsp; &nbsp;</p><p>代码如下：</p><pre><code class="language-java hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">//字符串替换与修改</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringFindandReplace</span> </span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>{</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str1 = <span class="hljs-string">"vbasic"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str2 = <span class="hljs-string">"Vbasic"</span>;</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"str1 = "</span>+str1);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"str2 = "</span>+str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***1、concat()方法将两字符串合并***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str3 = str1.concat(str2);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"str1和str2合并后的字符串为："</span>+str3);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***2、toLowerCase()方法将str1字符全部转换为小写***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str4 = str1.toLowerCase();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"str1的字符全部转换为小写："</span>+str4);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***3、toUpperCase()方法将str2字符全部转换为大写***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str5 = str2.toUpperCase();</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"str2的字符全部转换为大写："</span>+str5);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-comment">/***4、实现字符串的替换，原字符串内容不变***/</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str6 = str1.replaceFirst(<span class="hljs-string">"(?i)VBASIC"</span>,<span class="hljs-string">"C++"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        String str7 = str2.replaceFirst(<span class="hljs-string">"(?-i)VBASIC"</span>,<span class="hljs-string">"C++"</span>);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"替换后的str1："</span>+str6);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">        System.out.println(<span class="hljs-string">"替换后的str2:"</span>+str7);</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">    }</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">}</div></div></li></ol></code></pre><p>代码运行结果截图：</p><p><img alt="" src="images/java01507.jpg"><br></p><p><span style="color: rgb(255, 0, 0); font-size: 18px;">结束语</span></p><p>&nbsp; &nbsp; &nbsp; &nbsp;肝了两个晚上总算是把String类中的一些基本操作方法给整理完了，我觉得做一件事从一开始的激情到后来慢慢的潦草再到最后的坚持干完，努力追求进步的过程其实真的挺寂寞的，但是有什么办法呢？选择好的道路总会有开心与苦涩，坚持走下去吧，大不了用Java new()一个对象陪你一起走下去嘛，明天终于可以偷偷溜回家过五一啦，嘿嘿！！&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>                                    </div>
                    </div>


</div>


</body></html>