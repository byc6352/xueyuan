<html><head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title></title>
  <link href="images/style.css" rel="stylesheet">
</head>

<body class="stackedit"><div class="stackedit__html">

<div class="postbody">
<div class="blogpost-body " id="cnblogs_post_body">
    <p><span deep="10">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当程序越来越大，我们需要把它拆分成多个swf，在需要的时候动态加载。拆分时应该尽量把不同的类编译进唯一的swf，避免因swf文件增多而使整个程序的文件尺寸增大。&nbsp;按此原则可以拆分出以下两种swf，借助&nbsp;ApplicationDomain&nbsp;共享其代码和资源。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>模块(Module)</strong><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照程序逻辑，可以拆分出多个“功能模块”，如“注册”、“管理”等等；按照游戏或社区类程序的关卡或场景，可以拆分出不同的“场景模块”。<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些模块不是主程序运行必须的，只在需要的时候加载<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong style="color: rgb(255, 0, 0);">运行时共享库(RSL)</strong><br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主场景或者多个模块通用的资源，比如位图、声音、设计好的页面元素等，可作为“库”在主程序运行前加载。可以整套更换的皮肤(skin)只需先加载一套。<br data-filtered="filtered">&nbsp;&nbsp;<br data-filtered="filtered">－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>applicationDomain&nbsp;属性</strong><br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;var&nbsp;applicationDomain:ApplicationDomain&nbsp;=&nbsp;null<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定用于&nbsp;Loader.load()&nbsp;或&nbsp;Loader.loadBytes()&nbsp;方法的应用程序域。&nbsp;<span style="color: rgb(255, 0, 0);">只应在加载使用&nbsp;ActionScript&nbsp;3.0&nbsp;编写的&nbsp;SWF&nbsp;文件</span>（不是图像或使用&nbsp;ActionScript&nbsp;1.0&nbsp;或&nbsp;ActionScript&nbsp;2.0&nbsp;编写的&nbsp;SWF&nbsp;文件）时才使用此属性。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个安全域被分成一个或多个由&nbsp;ApplicationDomain&nbsp;对象表示的应用程序域。&nbsp;应用程序域并不是用于安全目的；它们用于管理&nbsp;ActionScript&nbsp;代码的协作单元。&nbsp;如果是从其它域加载&nbsp;SWF&nbsp;文件，并允许将它放置到另外一个安全域中，则您将无法控制所加载的&nbsp;SWF&nbsp;文件被放置到哪个应用程序域中；即使您指定应选择某个应用程序域，也会忽略。&nbsp;但是，如果是将&nbsp;SWF&nbsp;文件加载到您自己的安全域中（因为此&nbsp;SWF&nbsp;文件来自您自己的域，或者您正在将它导入到您的安全域中），您就可以控制为所加载的&nbsp;SWF&nbsp;文件选择哪个应用程序域。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在&nbsp;LoaderContext.applicationDomain&nbsp;中，您只可以传递您自己的安全域中的应用程序域。&nbsp;如果试图传递任何其它安全域中的应用程序域，则会引发&nbsp;SecurityError&nbsp;异常。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有四种&nbsp;ApplicationDomain&nbsp;属性可供您选择使用：<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载器的&nbsp;ApplicationDomain&nbsp;的子级（模块）。默认值。&nbsp;可以使用语法&nbsp;new&nbsp;ApplicationDomain(ApplicationDomain.currentDomain)&nbsp;显式表示这种选择。&nbsp;这将允许所加载的&nbsp;SWF&nbsp;文件直接使用父级的类，例如，可通过编写&nbsp;new&nbsp;MyClassDefinedInParent()&nbsp;来使用。&nbsp;但是父级则不能使用此语法；如果父级要使用子级的类，它必须调用&nbsp;ApplicationDomain.getDefinition()&nbsp;来检索它们。&nbsp;<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这种选择的优点是：<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(255, 0, 0);">1、如果子级定义的类与父级已经定义的类同名，不会出现错误结果；</span><br data-filtered="filtered"><span style="color: rgb(255, 0, 0);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、子级只会继承父级对该类的定义，除非子级或父级调用&nbsp;ApplicationDomain.getDefinition()&nbsp;方法来检索子级的冲突定义，否则将不使用此定义。</span><br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载器自己的&nbsp;<span style="color: rgb(255, 0, 0);">ApplicationDomain&nbsp;（共享库）</span>&nbsp;。使用&nbsp;ApplicationDomain.currentDomain&nbsp;时请使用此应用程序域。&nbsp;加载完成后，父级和子级可以直接使用对方的类。&nbsp;<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果子级试图定义的类与父级已经定义的类同名，将出现错误并放弃加载。&nbsp;<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;系统&nbsp;ApplicationDomain&nbsp;的子级（独立运行的程序或模块）&nbsp;。使用&nbsp;new&nbsp;ApplicationDomain(null)&nbsp;时请使用此应用程序域。&nbsp;这将完全分离加载方和被加载方，从而允许它们使用相同的名称定义各自版本的类并且不会产生冲突或隐藏。&nbsp;一方查看另一方的类的唯一方式是调用&nbsp;ApplicationDomain.getDefinition()&nbsp;方法。&nbsp;<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其它&nbsp;ApplicationDomain&nbsp;的子级。有时可能会有更复杂的&nbsp;ApplicationDomain&nbsp;层次结构。&nbsp;可以将&nbsp;SWF&nbsp;文件从您自己的&nbsp;SecurityDomain&nbsp;加载到任何&nbsp;ApplicationDomain&nbsp;中。&nbsp;例如，new&nbsp;ApplicationDomain(ApplicationDomain.currentDomain.parentDomain.parentDomain)&nbsp;将&nbsp;SWF&nbsp;文件加载到当前域父级的父级的新子级中。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载完成后，为调用&nbsp;ApplicationDomain.getDefinition()，任一方（加载方或被加载方）都可能需要找到它自己的&nbsp;ApplicationDomain&nbsp;或另一方的&nbsp;ApplicationDomain。&nbsp;任一方都可以通过使用&nbsp;ApplicationDomain.currentDomain&nbsp;来检索对它自己的应用程序域的引用。&nbsp;执行加载的&nbsp;SWF&nbsp;文件可以通过&nbsp;Loader.contentLoaderInfo.applicationDomain&nbsp;来检索对被加载的&nbsp;SWF&nbsp;文件的&nbsp;ApplicationDomain&nbsp;的引用。&nbsp;如果被加载的&nbsp;SWF&nbsp;文件知道自己的加载方式，则它可以找到执行加载的&nbsp;SWF&nbsp;文件的&nbsp;ApplicationDomain&nbsp;对象。&nbsp;例如，如果子级是以默认方式被加载的，则它可以通过使用&nbsp;ApplicationDomain.currentDomain.parentDomain&nbsp;找到执行加载的&nbsp;SWF&nbsp;文件的应用程序域。<br data-filtered="filtered"><br data-filtered="filtered">&nbsp;－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationDomain&nbsp;是存放AS3定义(包括类、方法、接口等)的容器。<br data-filtered="filtered">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Loader类加载swf时可以通过指定ApplicationDomain&nbsp;参数将swf加载到不同的域(Domain)：<br data-filtered="filtered">&nbsp;</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01701.gif"></a></span></div><img class="code_img_closed" id="code_img_closed_cc9caaf1-f7ff-471b-b005-ae5d0da621ab" style="display: none;" onclick="document.getElementById('cnblogs_code_open_cc9caaf1-f7ff-471b-b005-ae5d0da621ab').style.display='block';document.getElementById('code_img_opened_cc9caaf1-f7ff-471b-b005-ae5d0da621ab').style.display='inline';this.style.display='none'" src="images/flash01702.gif"><img class="code_img_opened" id="code_img_opened_cc9caaf1-f7ff-471b-b005-ae5d0da621ab" onclick="document.getElementById('cnblogs_code_open_cc9caaf1-f7ff-471b-b005-ae5d0da621ab').style.display='none';document.getElementById('code_img_closed_cc9caaf1-f7ff-471b-b005-ae5d0da621ab').style.display='inline';this.style.display='none'" src="images/flash01703.gif"><span class="cnblogs_code_collapse">代码</span> 
<div class="cnblogs_code_open" id="cnblogs_code_open_cc9caaf1-f7ff-471b-b005-ae5d0da621ab">
<div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: rgb(0, 0, 0);">var&nbsp;loader&nbsp;:&nbsp;Loader&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;Loader();<br>var&nbsp;context&nbsp;:&nbsp;LoaderContext&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;LoaderContext();<br></span><span style="color: rgb(0, 128, 0);">//</span><span style="color: rgb(0, 128, 0);">加载到子域(模块)</span><span style="color: rgb(0, 128, 0);"><br></span><span style="color: rgb(0, 0, 0);">context.applicationDomain&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;ApplicationDomain(ApplicationDomain.currentDomain);<br></span><span style="color: rgb(0, 128, 0);">//</span><span style="color: rgb(0, 128, 0);">加载到同域(共享库)</span><span style="color: rgb(0, 128, 0);"><br></span><span style="color: rgb(0, 0, 0);">context.applicationDomain&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;ApplicationDomain.currentDomain;<br></span><span style="color: rgb(0, 128, 0);">//</span><span style="color: rgb(0, 128, 0);">加载到新域(独立运行的程序或模块)</span><span style="color: rgb(0, 128, 0);"><br></span><span style="color: rgb(0, 0, 0);">context.applicationDomain&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;ApplicationDomain();<br>loader.load(</span><span style="color: rgb(0, 0, 255);">new</span><span style="color: rgb(0, 0, 0);">&nbsp;URLRequest(</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">loaded.swf</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">),&nbsp;context);</span></div></div><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01704.gif"></a></span></div></div>
<p><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationDomain使用类似于显示列表(DisplayList)的树形结构。&nbsp;相对于舞台(Stage)&nbsp;，可以认为&nbsp;ApplicationDomain&nbsp;最根部的是系统域(system&nbsp;domain)，包含&nbsp;Flash&nbsp;Player&nbsp;核心类定义。主程序所在的域(以下简称主域)就是它唯一的子域，类似于Stage下的文档类(Document&nbsp;Class)。<br>　　<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个fla文档类里代码：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgb(255, 0, 0);">this.stage</span>.addChild(mySprite);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(myMC);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(myShape);<br><br>　　运行后的显示列表：</p>
<p><span><img style="margin: 0px 10px 10px 0px; float: left;" alt="" src="images/flash01705.jpg" border="0"></span></p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p><span>
<p><br><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span>ApplicationDomain&nbsp;的类似结构：</span></p>
<p><span></span><span><img style="margin: 0px 10px 10px 0px; float: left;" alt="" src="images/flash01706.jpg" border="0"></span></p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><span></span>&nbsp;</p>
<p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>加载到子域(模块)</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类似于“继承”，子域可以直接获得父域所有的类定义，反之父域得不到子域的。和继承关系不同的是，如果子域中有和父域同名的类，子域定义会被忽略而使用父域的定义。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>加载到同域(运行时共享库)</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类似集合里的合并关系。被加载swf里的所有类定义被合并到当前域中可以直接使用。和加载到子域相同，和当前域同名的定义也会被忽略。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>加载到新域(独立运行的程序或模块)</strong><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swf载入指定域之前，先要检查该域及其父域中是否存在同名类，重复定义一概忽略。如果加载别人写的程序，或者使用旧版本的主程序加载新版本的模块，为避免类名冲突就要加载到新域独立运行以使用自己的类。<br><br>　　模块加载到同域不是一样可以吗？为何要加载到子域呢？好处就在于，卸载一个加载到子域的模块时，只要确保清除所有到该模块的引用，模块的所有类定义将被垃圾回收(Garbage&nbsp;Collection)。<br>　　有两种方式可以访问&nbsp;ApplicationDomain&nbsp;:<br><br>　　</span><span style="color: red;">ApplicationDomain.currentDomain</span><span><br><br>　　currentDomain是ApplicationDomain的静态变量，表示当前代码所在的域。该变量很奇特，在主程序里指向主域，在加载到子域的模块里则指向该模块所在的子域。虽然&nbsp;ApplicationDomain&nbsp;有个&nbsp;<span style="color: rgb(255, 0, 0);">parentDomain&nbsp;</span>属性，但子域已经自动获得了父域的类定义，所以通过&nbsp;ApplicationDomain.currentDomain&nbsp;就可以获取父域定义了——包括主程序和加载到主域的共享库。(注：系统域不可直接访问，主域和所有新域即系统域子域的parentDomain属性为null)&nbsp;<br>　　</span><span style="color: red;">LoaderInfo类的applicationDomain属性</span><span><br>　　此方式可以访问任何方式加载的swf的&nbsp;ApplicationDomain。对于主程序来说，加载到同域的库定义已经存在于&nbsp;ApplicationDomain.currentDomain&nbsp;，而模块的类主程序一般用不到。所以这种方式个人不推荐使用。<br>　　ApplicationDomain&nbsp;的&nbsp;hasDefinition()&nbsp;方法判断某定义是否存在，getDefinition()&nbsp;方法获取指定的定义。下面以一个例子来介绍&nbsp;ApplicationDomain&nbsp;的具体用法和应用程序的拆分。<br>　　本利有四个swf，shell.swf是主程序，lib.swf是共享库，login.swf和result.swf分别是“登录”和“结果”模块，所有的视图元件都在共享库中。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实际开发时可能有很多库，比如“位图库”、“音效库”、“模型通用库”等。“通用库”里存放多个模块共用的资源，比如此例中的背景元素。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而各个模块独有的资源还是放在各自的swf中。<br>　　主程序首先将共享库加载到同域，完成后将“登录模块”加载到子域。主程序可以像操作普通的视觉对象(DisplayObject)一样操作加载的模块：监听事件、调用方法。因为编译器不会识别未定义的类，为使用强类型，建议为主类和模型定义相应的接口，使用少量的重复代码协助编程。<br></span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01707.gif"></a></span></div><img class="code_img_closed" id="code_img_closed_7a3a833c-ed47-47e8-9c58-161f79f93318" style="display: none;" onclick="document.getElementById('cnblogs_code_open_7a3a833c-ed47-47e8-9c58-161f79f93318').style.display='block';document.getElementById('code_img_opened_7a3a833c-ed47-47e8-9c58-161f79f93318').style.display='inline';this.style.display='none'" src="images/flash01708.gif"><img class="code_img_opened" id="code_img_opened_7a3a833c-ed47-47e8-9c58-161f79f93318" onclick="document.getElementById('cnblogs_code_open_7a3a833c-ed47-47e8-9c58-161f79f93318').style.display='none';document.getElementById('code_img_closed_7a3a833c-ed47-47e8-9c58-161f79f93318').style.display='inline';this.style.display='none'" src="images/flash01709.gif"><span class="cnblogs_code_collapse">代码</span> 
<div class="cnblogs_code_open" id="cnblogs_code_open_7a3a833c-ed47-47e8-9c58-161f79f93318">
<div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: rgb(0, 0, 255);">private</span><span style="color: rgb(0, 0, 0);">&nbsp;function&nbsp;showModule(p_module:IModule):</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);"><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.m_moduleList[</span><span style="color: rgb(0, 0, 0);">0</span><span style="color: rgb(0, 0, 0);">]&nbsp;</span><span style="color: rgb(0, 0, 0);">==</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">login.swf</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_module.show(</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_module.addEventListener(</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">login</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">,&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.onLogin);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">else</span><span style="color: rgb(0, 0, 0);"><br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_module.show(</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">,&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.m_userName);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}</span></div></div><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01710.gif"></a></span></div></div>
<p><br>　　模块“继承”了主程序和共享库的所有类和资源，可以通过&nbsp;ApplicationDomain.currentDomain.getDefinition()&nbsp;来获取相应的类。注意获取不存在的类会抛出一个&nbsp;ReferenceError。<br><br></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01711.gif"></a></span></div><img class="code_img_closed" id="code_img_closed_f5eb4043-6c82-4480-9805-e5b540caa2a1" style="display: none;" onclick="document.getElementById('cnblogs_code_open_f5eb4043-6c82-4480-9805-e5b540caa2a1').style.display='block';document.getElementById('code_img_opened_f5eb4043-6c82-4480-9805-e5b540caa2a1').style.display='inline';this.style.display='none'" src="images/flash01712.gif"><img class="code_img_opened" id="code_img_opened_f5eb4043-6c82-4480-9805-e5b540caa2a1" onclick="document.getElementById('cnblogs_code_open_f5eb4043-6c82-4480-9805-e5b540caa2a1').style.display='none';document.getElementById('code_img_closed_f5eb4043-6c82-4480-9805-e5b540caa2a1').style.display='inline';this.style.display='none'" src="images/flash01713.gif"><span class="cnblogs_code_collapse">代码</span> 
<div class="cnblogs_code_open" id="cnblogs_code_open_f5eb4043-6c82-4480-9805-e5b540caa2a1">
<div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: rgb(0, 0, 255);">protected</span><span style="color: rgb(0, 0, 0);">&nbsp;function&nbsp;getClass(p_name&nbsp;:&nbsp;String)&nbsp;:&nbsp;Class<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">try</span><span style="color: rgb(0, 0, 0);"><br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;ApplicationDomain.currentDomain.getDefinition(p_name)&nbsp;as&nbsp;Class;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;</span><span style="color: rgb(0, 0, 255);">catch</span><span style="color: rgb(0, 0, 0);">&nbsp;(p_e&nbsp;:&nbsp;ReferenceError)<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trace(</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">定义&nbsp;</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 0);">+</span><span style="color: rgb(0, 0, 0);">&nbsp;p_name&nbsp;</span><span style="color: rgb(0, 0, 0);">+</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">&nbsp;不存在</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 0);">;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">return</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 0);">;<br>}</span></div></div><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01714.gif"></a></span></div></div>
<p>&nbsp;<br>　　登录模块获取库中的界面元素，并在点击按钮后抛出事件。Event类不允许带参数，必须使用继承Event的自定义事件抛出参数。主程序可以把模块的自定义事件也编译进去(这样就增大了整个程序的文件尺寸)，或者让监听模块事件的函数接受一个Objcet参数，以获取其动态属性。<br></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01715.gif"></a></span></div><img class="code_img_closed" id="code_img_closed_0f591646-735b-4480-a69e-331ae501b190" style="display: none;" onclick="document.getElementById('cnblogs_code_open_0f591646-735b-4480-a69e-331ae501b190').style.display='block';document.getElementById('code_img_opened_0f591646-735b-4480-a69e-331ae501b190').style.display='inline';this.style.display='none'" src="images/flash01716.gif"><img class="code_img_opened" id="code_img_opened_0f591646-735b-4480-a69e-331ae501b190" onclick="document.getElementById('cnblogs_code_open_0f591646-735b-4480-a69e-331ae501b190').style.display='none';document.getElementById('code_img_closed_0f591646-735b-4480-a69e-331ae501b190').style.display='inline';this.style.display='none'" src="images/flash01717.gif"><span class="cnblogs_code_collapse">代码</span> 
<div class="cnblogs_code_open" id="cnblogs_code_open_0f591646-735b-4480-a69e-331ae501b190">
<div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: rgb(0, 0, 255);">private</span><span style="color: rgb(0, 0, 0);">&nbsp;function&nbsp;onLogin(p_e:Object):</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);"><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.m_userName&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;p_e.userName;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;login:IModule&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;p_e.currentTarget;<br>&nbsp;&nbsp;&nbsp;&nbsp;login.removeEventListener(</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">login</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">,&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.onLogin);<br>&nbsp;&nbsp;&nbsp;&nbsp;login.dispose();<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.loadSwf();<br>}</span></div></div><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01718.gif"></a></span></div></div>
<p><br>　　主程序收到事件之后卸载注册模块，加载“结果模块”到子域，并将登录模块传出的”userName”参数传给结果模块。<br></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01719.gif"></a></span></div><img class="code_img_closed" id="code_img_closed_3e61d132-5e71-478c-bb88-c4d0a10f0325" style="display: none;" onclick="document.getElementById('cnblogs_code_open_3e61d132-5e71-478c-bb88-c4d0a10f0325').style.display='block';document.getElementById('code_img_opened_3e61d132-5e71-478c-bb88-c4d0a10f0325').style.display='inline';this.style.display='none'" src="images/flash01720.gif"><img class="code_img_opened" id="code_img_opened_3e61d132-5e71-478c-bb88-c4d0a10f0325" onclick="document.getElementById('cnblogs_code_open_3e61d132-5e71-478c-bb88-c4d0a10f0325').style.display='none';document.getElementById('code_img_closed_3e61d132-5e71-478c-bb88-c4d0a10f0325').style.display='inline';this.style.display='none'" src="images/flash01721.gif"><span class="cnblogs_code_collapse">代码</span>
<div class="cnblogs_code_open" id="cnblogs_code_open_3e61d132-5e71-478c-bb88-c4d0a10f0325">
<div><!--<br/ /><br/ />Code highlighting produced by Actipro CodeHighlighter (freeware)<br/ />http://www.CodeHighlighter.com/<br/ /><br/ />--><span style="color: rgb(0, 0, 255);">public</span><span style="color: rgb(0, 0, 0);">&nbsp;function&nbsp;show(p_parent:DisplayObjectContainer,&nbsp;<img alt="" src="images/flash01722.gif">&nbsp;rest):</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);"><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;libClass:Class&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.getClass(</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">net.eidiot.appDomainDemo.Libaray</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">);<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">if</span><span style="color: rgb(0, 0, 0);">&nbsp;(libClass&nbsp;</span><span style="color: rgb(0, 0, 0);">!=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 0);">)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.initUi(libClass,&nbsp;rest);<br>}<br><br>override&nbsp;</span><span style="color: rgb(0, 0, 255);">protected</span><span style="color: rgb(0, 0, 0);">&nbsp;function&nbsp;initUi(p_libClass:Class,&nbsp;p_rest:Array&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;</span><span style="color: rgb(0, 0, 255);">null</span><span style="color: rgb(0, 0, 0);">):</span><span style="color: rgb(0, 0, 255);">void</span><span style="color: rgb(0, 0, 0);"><br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.addUi(</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.getClass(p_libClass.BG_NAME),&nbsp;</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">结果</span><span style="color: rgb(0, 0, 0);">"</span><span style="color: rgb(0, 0, 0);">);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;resultFunc:Function&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;p_libClass.getResult;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;userName:String&nbsp;</span><span style="color: rgb(0, 0, 0);">=</span><span style="color: rgb(0, 0, 0);">&nbsp;p_rest[</span><span style="color: rgb(0, 0, 0);">0</span><span style="color: rgb(0, 0, 0);">];<br>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: rgb(0, 0, 255);">this</span><span style="color: rgb(0, 0, 0);">.addChild(resultFunc(userName));<br>}</span></div></div><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码" onclick="copyCnblogsCode(this)" href="javascript:void(0);"><img alt="复制代码" src="images/flash01723.gif"></a></span></div></div>
<p><br>　　注意initUi()方法分别使用了共享库中Libaray类的静态属性BG_NAME和静态方法getResult()。但是直接调用此静态方法会报错，可以先用&nbsp;resultFunc&nbsp;变量取出此方法。<br></p></span>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block"><div id="BlogPostCategory">
    分类: 
            <a href="https://www.cnblogs.com/sevenyuan/category/210455.html" target="_blank">Flash 基础</a></div>


    <div id="blog_post_info">
<div id="green_channel">
        <a id="green_channel_digg" onclick="DiggIt(1614629,cb_blogId,1);green_channel_success(this,'谢谢推荐！');" href="javascript:void(0);">好文要顶</a>
        <a id="green_channel_follow" onclick="follow('83662d84-3991-de11-ba8f-001cf0cd104b');" href="javascript:void(0);">关注我</a>
    <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
    <a title="分享至新浪微博" id="green_channel_weibo" onclick="ShareToTsina()" href="javascript:void(0);"><img alt="" src="images/flash01724.png"></a>
    <a title="分享至微信" id="green_channel_wechat" onclick="shareOnWechat()" href="javascript:void(0);"><img alt="" src="images/flash01725.png"></a>
</div>
<div id="author_profile">
    <div class="author_profile_info" id="author_profile_info">
            <a href="https://home.cnblogs.com/u/sevenyuan/" target="_blank"><img class="author_avatar" alt="" src="images/flash01726.jpg"></a>
        <div class="author_profile_info" id="author_profile_detail">
            <a href="https://home.cnblogs.com/u/sevenyuan/">Bill Yuan</a><br>
            <a href="https://home.cnblogs.com/u/sevenyuan/followees/">关注 - 1</a><br>
            <a href="https://home.cnblogs.com/u/sevenyuan/followers/">粉丝 - 562</a>
        </div>
    </div>
    <div class="clear"></div>
    <div id="author_profile_honor"></div>
    <div id="author_profile_follow">
                <a onclick="follow('83662d84-3991-de11-ba8f-001cf0cd104b');return false;" href="javascript:void(0);">+加关注</a>
    </div>
</div>
<div id="div_digg">
    <div class="diggit" onclick="votePost(1614629,'Digg')">
        <span class="diggnum" id="digg_count">0</span>
    </div>
    <div class="buryit" onclick="votePost(1614629,'Bury')">
        <span class="burynum" id="bury_count">0</span>
    </div>
    <div class="clear"></div>
    <div class="diggword" id="digg_tips">
    </div>
</div>

<script type="text/javascript">
    currentDiggType = 0;
</script></div>
    <div class="clear"></div>
    <div id="post_next_prev">

    <a class="p_n_p_prefix" href="https://www.cnblogs.com/sevenyuan/archive/2009/12/01/1614619.html">« </a> 上一篇：    <a title="发布于 2009-12-01 15:34" href="https://www.cnblogs.com/sevenyuan/archive/2009/12/01/1614619.html">as2与as3中对待空字符的区别</a>
    <br>
    <a class="p_n_p_prefix" href="https://www.cnblogs.com/sevenyuan/archive/2009/12/01/1614635.html">» </a> 下一篇：    <a title="发布于 2009-12-01 15:45" href="https://www.cnblogs.com/sevenyuan/archive/2009/12/01/1614635.html">AS3批量上传的源文件</a>

</div>
</div></div>

</div>


</body></html>