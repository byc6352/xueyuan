<HTML><HEAD><TITLE>Mysql命名规范 - 阿朗999 - CSDN博客</TITLE>
<META charset=utf-8>
<META name=viewport content="width=device-width, initial-scale=1.0"><LINK rel=stylesheet href="images/style.css"></HEAD>
<BODY class=stackedit>
<DIV class=stackedit__html>
<DIV style="OVERFLOW: hidden" id=article_content class="article_content clearfix">
<DIV class=article-copyright><SPAN class=creativecommons><A href="http://creativecommons.org/licenses/by-sa/4.0/" rel=license></A><SPAN>版权声明：本文为博主原创文章，遵循<A href="http://creativecommons.org/licenses/by-sa/4.0/" target=_blank> CC 4.0 by-sa </A>版权协议，转载请附上原文出处链接和本声明。 </SPAN>
<DIV class=article-source-link2222>本文链接：<A href="https://blog.csdn.net/fujian9544/article/details/86649096">https://blog.csdn.net/fujian9544/article/details/86649096</A> </DIV></SPAN></DIV><LINK rel=stylesheet href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css"><LINK rel=stylesheet href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">
<DIV id=content_views class=htmledit_views jQuery191009734457487499071="19">
<H1><STRONG>数据库表字段命名规范</STRONG></H1>
<P><SPAN style="COLOR: #f33b45"><STRONG>内容由网上摘抄并进行总结/精简/标记后的内容</STRONG></SPAN></P>
<P>本文包含了</P>
<UL>
<LI>数据库命名 
<LI>数据库表命名 
<LI>数据库表字段命名 
<LI>SQL语言编码的规范 </LI></UL>
<H2>一、数据库命名规范</H2>
<P>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成，命名简洁明确，<STRONG><SPAN style="COLOR: #f33b45">多个单词用下划线'_'分隔，</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">一个项目一个数据库，多个项目慎用同一个数据库</SPAN></STRONG></P>
<P>&nbsp;</P>
<H2>二、数据库表命名规范</H2>
<P>2.1数据表命名规范</P>
<P>（1）采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成，命名简洁明确，<SPAN style="COLOR: #f33b45">多个单词用下划线'_'分隔</SPAN></P>
<P><SPAN style="COLOR: #f33b45"><STRONG>（2）全部小写命名，禁止出现大写</STRONG></SPAN></P>
<P>（3）禁止使用数据库关键字，如：name，time ，datetime，password等</P>
<P>（4）表名称不应该取得太长（一般不超过三个英文单词）</P>
<P>（5）<STRONG>表的名称一般使用名词或者动宾短语</STRONG></P>
<P>（6）<STRONG>用单数形式表示名称，例如，使用 employee，而不是 employees</STRONG></P>
<P>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 明细表的名称为：主表的名称+字符dtl（detail缩写）</P>
<P>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 例如：采购定单的名称为：po_order，则采购定单的明细表为：po_orderdtl&nbsp;</P>
<P>（7）表必须填写描述信息（使用SQL语句建表时）</P>
<P>2.2命名规范</P>
<P><STRONG>①模块_+功能点&nbsp; 示例：alllive_log&nbsp;&nbsp; alllive_category</STRONG></P>
<P><STRONG>②功能点&nbsp; 示例：live&nbsp;&nbsp; message</STRONG></P>
<P><STRONG>③通用表&nbsp; 示例：all_user</STRONG></P>
<P>2.3待优化命名示例</P>
<P><STRONG>①冗余：</STRONG></P>
<P>错误示例：yy_alllive_video_recomment&nbsp;&nbsp;&nbsp; yy_alllive_open_close_log</P>
<P>说明：去除项目名，简化表名长度，去”yy_”</P>
<P><STRONG>②相同类别表命名存在差异，管理性差</STRONG></P>
<P>错误示例：yy_all_live_category&nbsp;&nbsp;&nbsp; yy_alllive_comment_user</P>
<P>说明：去除项目名，统一命名规则，均为”yy_alllive_”开头即可</P>
<P><STRONG>③命名格式存在差异</STRONG></P>
<P>错误示例：yy_showfriend&nbsp;&nbsp;&nbsp; yy_user_getpoints&nbsp;&nbsp;&nbsp; yy_live_program_get</P>
<P>说明：去除项目名，统一命名规则，<STRONG>动宾短语分离</STRONG>且<STRONG>动宾逻辑顺序统一</STRONG></P>
<P>&nbsp;</P>
<H2>三、数据库字段命名规范</H2>
<P>3.1字段命名规范</P>
<P>（1）采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成，命名简洁明确，多个单词用下划线'_'分隔</P>
<P><SPAN style="COLOR: #f33b45">（2）<STRONG>全部小写命名，禁止出现大写</STRONG></SPAN></P>
<P><SPAN style="COLOR: #f33b45">（3）<STRONG>字段必须填写描述信息</STRONG></SPAN></P>
<P>（4）禁止使用数据库关键字，如：name，time ，datetime password&nbsp;等</P>
<P>（5）<STRONG>字段名称一般采用名词或动宾短语</STRONG></P>
<P>（6）采用字段的名称必须是易于理解，一般不超过三个英文单词</P>
<P>（7）在命名表的列时，不要重复表的名称</P>
<P>例如，在名employe的表中避免使用名为employee_lastname的字段</P>
<P>（8）不要在列的名称中包含数据类型</P>
<P><STRONG><SPAN style="COLOR: #f33b45">（9）字段命名使用完整名称，禁止缩写&nbsp;</SPAN></STRONG></P>
<P>3.2命名规范</P>
<P><SPAN style="COLOR: #f33b45"><STRONG>①名词&nbsp; 示例：user_id&nbsp;&nbsp;&nbsp; user_name&nbsp;&nbsp;&nbsp; sex</STRONG></SPAN></P>
<P><SPAN style="COLOR: #f33b45"><STRONG>②动宾短语&nbsp; 示例：is_friend&nbsp;&nbsp; is_good</STRONG></SPAN></P>
<P>3.3待优化命名示例</P>
<P><STRONG>①大小写规则不统一</STRONG></P>
<P>错误示例：user_id&nbsp;&nbsp;&nbsp; houseID</P>
<P>说明：使用统一规则，修改为”user_id”，”house_id”</P>
<P>&nbsp;</P>
<P><STRONG>②加下划线规则不统一</STRONG></P>
<P>错误示例：username&nbsp;&nbsp;&nbsp; userid&nbsp;&nbsp;&nbsp; isfriend&nbsp;&nbsp;&nbsp; isgood</P>
<P>说明：使用下划线进行分类，提升可性，方便管理，修改为”user_name”，”user_id”，”is_friend”，”is_good”</P>
<P><STRONG>&nbsp;</STRONG></P>
<P><STRONG>③字段表示不明确</STRONG></P>
<P>错误示例：uid&nbsp;&nbsp;&nbsp; pid</P>
<P>说明：使用完整名称，提高可读性，修改为”user_id”，”person_id”</P>
<P>3.4字段类型规范</P>
<P>（1）所有字段在设计时，除以下数据类型timestamp、image、datetime、smalldatetime、uniqueidentifier、binary、sql_variant、binary 、varbinary外，</P>
<P><STRONG><SPAN style="COLOR: #f33b45">必须有默认值，字符型的默认值为一个空字符值串’’，数值型的默认值为数值0，逻辑型的默认值为数值0</SPAN></STRONG></P>
<P>（2）系统中所有逻辑型中数值0表示为“假”，数值1表示为“真”，datetime、smalldatetime类型的字段没有默认值，必须为NULL</P>
<P>（3）用尽量少的存储空间来存储一个字段的数据</P>
<P><STRONG><SPAN style="COLOR: #f33b45">使用int就不要使用varchar、char，</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">用varchar(16)就不要使varchar(256)</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">IP地址使用int类型</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">固定长度的类型最好使用char，例如：邮编(postcode)</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">能使用tinyint就不要使用smallint，int</SPAN></STRONG></P>
<P><SPAN style="COLOR: #f33b45"><STRONG>最好给每个字段一个默认值，最好不能为null</STRONG></SPAN></P>
<P>（4）用合适的字段类型节约空间</P>
<P>字符转化为数字(能转化的最好转化，同样节约空间、提高查询性能)</P>
<P>避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效)</P>
<P><STRONG><SPAN style="COLOR: #f33b45">少用text类型(尽量使用varchar代替text字段)</SPAN></STRONG></P>
<P>&nbsp;</P>
<P>3.5数据库中每个字段的规范描述&nbsp;</P>
<P>&nbsp;&nbsp; （1）尽量遵守第三范式的标准（3NF）&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 表内的每一个值只能被表达一次&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 表内的每一行都应当被唯一的标示&nbsp;</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; 表内不应该存储依赖于其他键的非键信息</P>
<P>(2)如果字段事实上是与其它表的关键字相关联而未设计为外键引用，需建索引</P>
<P><SPAN style="COLOR: #f33b45"><STRONG>(3)如果字段与其它表的字段相关联，需建索引</STRONG></SPAN></P>
<P><STRONG><SPAN style="COLOR: #f33b45">(4)如果字段需做模糊查询之外的条件查询，需建索引</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">(5)除了主关键字允许建立簇索引外，其它字段所建索引必须为非簇索引</SPAN></STRONG></P>
<H2>四、SQL语言编码规范&nbsp;</H2>
<P>4.1大小写规范&nbsp;</P>
<P><STRONG><SPAN style="COLOR: #f33b45">（1）所有关键字必须大写，如：INSERT、UPDATE、DELETE、SELECT及其子句，IF……ELSE、CASE、DECLARE等</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">（2）所有函数及其参数中除用户变量以外的部分必须大写</SPAN></STRONG></P>
<P><STRONG><SPAN style="COLOR: #f33b45">（3）在定义变量时用到的数据类型必须小写</SPAN></STRONG></P>
<P>4.2注释&nbsp;</P>
<P>注释可以包含在批处理中，在触发器、存储过程中包含描述性注释将大大增加文本的可读性和可维护性，本规范建议：&nbsp;</P>
<P>（1）<STRONG><SPAN style="COLOR: #f33b45">注释以英文为主</SPAN></STRONG>，实际应用中，发现以中文注释的SQL语句版本在英文环境中不可用，为避免后续版本执行过程中发生某些异常错误，建议使用英文注释</P>
<P>（2）注释尽可能详细、全面创建每一数据对象前，应具体描述该对象的功能和用途，传入参数的含义应该有所说明，如果取值范围确定，也应该一并说明，取值有特定含义的变量（如boolean类型变量），应给出每个值的含义</P>
<P>（3）注释语法：单行注释、多行注释&nbsp;</P>
<P>单行注释：注释前有两个连字符（--）对变量、条件子句可以采用该类注释</P>
<P>多行注释：符号之间的内容为注释内容，对某项完整的操作建议使用该类注释</P>
<P>（4）注释简洁，同时应描述清晰</P>
<P>（5）函数注释：&nbsp;</P>
<P>编写函数文本--如触发器、存储过程以及其他数据对象--时，必须为每个函数增加适当注释，该注释以多行注释为主，主要结构如下：&nbsp;</P>
<P>CREATE&nbsp;PROCEDURE&nbsp;sp_xxx</P></DIV></DIV></DIV></BODY></HTML>